
Trabajo Micros - Sistemas Electronicos Digitales.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000001c  08005374  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005374  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6a7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001962  00000000  00000000  0002b6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  0002d058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab0  00000000  00000000  0002dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020fe5  00000000  00000000  0002e680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000847e  00000000  00000000  0004f665  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc1fe  00000000  00000000  00057ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030fc  00000000  00000000  00123d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005320 	.word	0x08005320

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08005320 	.word	0x08005320

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b972 	b.w	8000d40 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4688      	mov	r8, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14b      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4615      	mov	r5, r2
 8000a86:	d967      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0720 	rsb	r7, r2, #32
 8000a92:	fa01 f302 	lsl.w	r3, r1, r2
 8000a96:	fa20 f707 	lsr.w	r7, r0, r7
 8000a9a:	4095      	lsls	r5, r2
 8000a9c:	ea47 0803 	orr.w	r8, r7, r3
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aac:	fa1f fc85 	uxth.w	ip, r5
 8000ab0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ab4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ab8:	fb07 f10c 	mul.w	r1, r7, ip
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18eb      	adds	r3, r5, r3
 8000ac2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ac6:	f080 811b 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8118 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000ad0:	3f02      	subs	r7, #2
 8000ad2:	442b      	add	r3, r5
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000adc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ae8:	45a4      	cmp	ip, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	192c      	adds	r4, r5, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8107 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	f240 8104 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000afc:	3802      	subs	r0, #2
 8000afe:	442c      	add	r4, r5
 8000b00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b04:	eba4 040c 	sub.w	r4, r4, ip
 8000b08:	2700      	movs	r7, #0
 8000b0a:	b11e      	cbz	r6, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c6 4300 	strd	r4, r3, [r6]
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d909      	bls.n	8000b32 <__udivmoddi4+0xbe>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80eb 	beq.w	8000cfa <__udivmoddi4+0x286>
 8000b24:	2700      	movs	r7, #0
 8000b26:	e9c6 0100 	strd	r0, r1, [r6]
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	fab3 f783 	clz	r7, r3
 8000b36:	2f00      	cmp	r7, #0
 8000b38:	d147      	bne.n	8000bca <__udivmoddi4+0x156>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xd0>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 80fa 	bhi.w	8000d38 <__udivmoddi4+0x2c4>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d0e0      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000b52:	e9c6 4800 	strd	r4, r8, [r6]
 8000b56:	e7dd      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000b58:	b902      	cbnz	r2, 8000b5c <__udivmoddi4+0xe8>
 8000b5a:	deff      	udf	#255	; 0xff
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f040 808f 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b66:	1b49      	subs	r1, r1, r5
 8000b68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6c:	fa1f f885 	uxth.w	r8, r5
 8000b70:	2701      	movs	r7, #1
 8000b72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb08 f10c 	mul.w	r1, r8, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b96:	4684      	mov	ip, r0
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	b2a3      	uxth	r3, r4
 8000b9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ba4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ba8:	fb08 f800 	mul.w	r8, r8, r0
 8000bac:	45a0      	cmp	r8, r4
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x14c>
 8000bb0:	192c      	adds	r4, r5, r4
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x14a>
 8000bb8:	45a0      	cmp	r8, r4
 8000bba:	f200 80b6 	bhi.w	8000d2a <__udivmoddi4+0x2b6>
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	eba4 0408 	sub.w	r4, r4, r8
 8000bc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc8:	e79f      	b.n	8000b0a <__udivmoddi4+0x96>
 8000bca:	f1c7 0c20 	rsb	ip, r7, #32
 8000bce:	40bb      	lsls	r3, r7
 8000bd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000be4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000be8:	4325      	orrs	r5, r4
 8000bea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bee:	0c2c      	lsrs	r4, r5, #16
 8000bf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bf4:	fa1f fa8e 	uxth.w	sl, lr
 8000bf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000c00:	429c      	cmp	r4, r3
 8000c02:	fa02 f207 	lsl.w	r2, r2, r7
 8000c06:	fa00 f107 	lsl.w	r1, r0, r7
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c14:	f080 8087 	bcs.w	8000d26 <__udivmoddi4+0x2b2>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f240 8084 	bls.w	8000d26 <__udivmoddi4+0x2b2>
 8000c1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c22:	4473      	add	r3, lr
 8000c24:	1b1b      	subs	r3, r3, r4
 8000c26:	b2ad      	uxth	r5, r5
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c38:	45a2      	cmp	sl, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	d26b      	bcs.n	8000d1e <__udivmoddi4+0x2aa>
 8000c46:	45a2      	cmp	sl, r4
 8000c48:	d969      	bls.n	8000d1e <__udivmoddi4+0x2aa>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4474      	add	r4, lr
 8000c4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	eba4 040a 	sub.w	r4, r4, sl
 8000c5a:	454c      	cmp	r4, r9
 8000c5c:	46c2      	mov	sl, r8
 8000c5e:	464b      	mov	r3, r9
 8000c60:	d354      	bcc.n	8000d0c <__udivmoddi4+0x298>
 8000c62:	d051      	beq.n	8000d08 <__udivmoddi4+0x294>
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d069      	beq.n	8000d3c <__udivmoddi4+0x2c8>
 8000c68:	ebb1 050a 	subs.w	r5, r1, sl
 8000c6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c74:	40fd      	lsrs	r5, r7
 8000c76:	40fc      	lsrs	r4, r7
 8000c78:	ea4c 0505 	orr.w	r5, ip, r5
 8000c7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c80:	2700      	movs	r7, #0
 8000c82:	e747      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000c84:	f1c2 0320 	rsb	r3, r2, #32
 8000c88:	fa20 f703 	lsr.w	r7, r0, r3
 8000c8c:	4095      	lsls	r5, r2
 8000c8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c92:	fa21 f303 	lsr.w	r3, r1, r3
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	4338      	orrs	r0, r7
 8000c9c:	0c01      	lsrs	r1, r0, #16
 8000c9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ca2:	fa1f f885 	uxth.w	r8, r5
 8000ca6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cae:	fb07 f308 	mul.w	r3, r7, r8
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x256>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc0:	d22f      	bcs.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d92d      	bls.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc6:	3f02      	subs	r7, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1acb      	subs	r3, r1, r3
 8000ccc:	b281      	uxth	r1, r0
 8000cce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cda:	fb00 f308 	mul.w	r3, r0, r8
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x27e>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce8:	d217      	bcs.n	8000d1a <__udivmoddi4+0x2a6>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d915      	bls.n	8000d1a <__udivmoddi4+0x2a6>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1ac9      	subs	r1, r1, r3
 8000cf4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cf8:	e73b      	b.n	8000b72 <__udivmoddi4+0xfe>
 8000cfa:	4637      	mov	r7, r6
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	e709      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000d00:	4607      	mov	r7, r0
 8000d02:	e6e7      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d04:	4618      	mov	r0, r3
 8000d06:	e6fb      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d08:	4541      	cmp	r1, r8
 8000d0a:	d2ab      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d10:	eb69 020e 	sbc.w	r2, r9, lr
 8000d14:	3801      	subs	r0, #1
 8000d16:	4613      	mov	r3, r2
 8000d18:	e7a4      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1a:	4660      	mov	r0, ip
 8000d1c:	e7e9      	b.n	8000cf2 <__udivmoddi4+0x27e>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	e795      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d22:	4667      	mov	r7, ip
 8000d24:	e7d1      	b.n	8000cca <__udivmoddi4+0x256>
 8000d26:	4681      	mov	r9, r0
 8000d28:	e77c      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	442c      	add	r4, r5
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0x14c>
 8000d30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d34:	442b      	add	r3, r5
 8000d36:	e72f      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d38:	4638      	mov	r0, r7
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xda>
 8000d3c:	4637      	mov	r7, r6
 8000d3e:	e6e9      	b.n	8000b14 <__udivmoddi4+0xa0>

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//-------------------------------------------------------INTERRUPCIONES ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)  //FUNCIONAMIENTO POTENCIOMETRO
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <HAL_ADC_ConvCpltCallback+0x40>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d106      	bne.n	8000d64 <HAL_ADC_ConvCpltCallback+0x20>
	{
		ADC_val =HAL_ADC_GetValue(&hadc1);
 8000d56:	480c      	ldr	r0, [pc, #48]	; (8000d88 <HAL_ADC_ConvCpltCallback+0x44>)
 8000d58:	f001 ff9a 	bl	8002c90 <HAL_ADC_GetValue>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_ADC_ConvCpltCallback+0x48>)
 8000d62:	801a      	strh	r2, [r3, #0]
	    //HAL_ADC_Stop_IT(&hadc1);
	}
	if (hadc->Instance == ADC2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d106      	bne.n	8000d7c <HAL_ADC_ConvCpltCallback+0x38>
	{
		 ADC_vali = HAL_ADC_GetValue(&hadc2);
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <HAL_ADC_ConvCpltCallback+0x50>)
 8000d70:	f001 ff8e 	bl	8002c90 <HAL_ADC_GetValue>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_ADC_ConvCpltCallback+0x54>)
 8000d7a:	801a      	strh	r2, [r3, #0]
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40012000 	.word	0x40012000
 8000d88:	20000134 	.word	0x20000134
 8000d8c:	20000200 	.word	0x20000200
 8000d90:	40012100 	.word	0x40012100
 8000d94:	200000e4 	.word	0x200000e4
 8000d98:	20000004 	.word	0x20000004

08000d9c <Ventilador>:

void Ventilador()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	  HAL_ADC_Start_IT(&hadc1);
 8000da0:	480a      	ldr	r0, [pc, #40]	; (8000dcc <Ventilador+0x30>)
 8000da2:	f001 fd27 	bl	80027f4 <HAL_ADC_Start_IT>
	  htim9.Instance->CCR2 = (ADC_val*100)/255;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <Ventilador+0x34>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	fb03 f302 	mul.w	r3, r3, r2
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <Ventilador+0x38>)
 8000db6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dba:	441a      	add	r2, r3
 8000dbc:	11d2      	asrs	r2, r2, #7
 8000dbe:	17db      	asrs	r3, r3, #31
 8000dc0:	1ad2      	subs	r2, r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <Ventilador+0x3c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000134 	.word	0x20000134
 8000dd0:	20000200 	.word	0x20000200
 8000dd4:	80808081 	.word	0x80808081
 8000dd8:	20000204 	.word	0x20000204

08000ddc <HAL_GPIO_EXTI_Callback>:

//-------------------------------------------------------INTERRUPCIONES BOTONES
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
	 if(GPIO_Pin == GPIO_PIN_0)
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d102      	bne.n	8000df2 <HAL_GPIO_EXTI_Callback+0x16>
	 {
		 but3=1;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
	 }
	 if(GPIO_Pin == GPIO_PIN_1)
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d102      	bne.n	8000dfe <HAL_GPIO_EXTI_Callback+0x22>
	 {
		 but4=1;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x78>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
	 }
	 if(GPIO_Pin == GPIO_PIN_15)
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e04:	d102      	bne.n	8000e0c <HAL_GPIO_EXTI_Callback+0x30>
	 {
	 	but1=1;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
	 }
	 if(GPIO_Pin == GPIO_PIN_14)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e12:	d102      	bne.n	8000e1a <HAL_GPIO_EXTI_Callback+0x3e>
	 {
	 	but2=1;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_GPIO_EXTI_Callback+0x80>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
	 }
	 if(GPIO_Pin==GPIO_PIN_3)
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d10a      	bne.n	8000e36 <HAL_GPIO_EXTI_Callback+0x5a>
	 {
		if   (flag == 1) {flag = 0;}
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d103      	bne.n	8000e30 <HAL_GPIO_EXTI_Callback+0x54>
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_EXTI_Callback+0x5a>
		else             {flag = 1;}
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
	 }
	 if(GPIO_Pin==GPIO_PIN_4)
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	2b10      	cmp	r3, #16
 8000e3a:	d102      	bne.n	8000e42 <HAL_GPIO_EXTI_Callback+0x66>
	 {
		 desactivar_alarma = 1;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	601a      	str	r2, [r3, #0]
	 }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000044 	.word	0x20000044
 8000e54:	20000048 	.word	0x20000048
 8000e58:	2000004c 	.word	0x2000004c
 8000e5c:	20000050 	.word	0x20000050
 8000e60:	20000130 	.word	0x20000130
 8000e64:	2000006c 	.word	0x2000006c

08000e68 <debouncerbut3>:

int debouncerbut3(volatile int* button_int, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_number)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	4613      	mov	r3, r2
 8000e74:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d13b      	bne.n	8000ef6 <debouncerbut3+0x8e>
	{
		if (button_count == 0)
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <debouncerbut3+0x98>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10b      	bne.n	8000e9e <debouncerbut3+0x36>
		{
			counter = HAL_GetTick();
 8000e86:	f001 fc43 	bl	8002710 <HAL_GetTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <debouncerbut3+0x9c>)
 8000e90:	601a      	str	r2, [r3, #0]
			button_count++;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <debouncerbut3+0x98>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <debouncerbut3+0x98>)
 8000e9c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20)
 8000e9e:	f001 fc37 	bl	8002710 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <debouncerbut3+0x9c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b13      	cmp	r3, #19
 8000eac:	d923      	bls.n	8000ef6 <debouncerbut3+0x8e>
		{
			counter = HAL_GetTick();
 8000eae:	f001 fc2f 	bl	8002710 <HAL_GetTick>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <debouncerbut3+0x9c>)
 8000eb8:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_Port, GPIO_number) != 1)
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	68b8      	ldr	r0, [r7, #8]
 8000ec0:	f002 fbdc 	bl	800367c <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d003      	beq.n	8000ed2 <debouncerbut3+0x6a>
			{
				button_count = 1;
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <debouncerbut3+0x98>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e005      	b.n	8000ede <debouncerbut3+0x76>
			}
			else
				button_count++;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <debouncerbut3+0x98>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <debouncerbut3+0x98>)
 8000edc:	701a      	strb	r2, [r3, #0]
			if (button_count == 4)
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <debouncerbut3+0x98>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d107      	bne.n	8000ef6 <debouncerbut3+0x8e>
			{ //Periodo Antirrebotes
				button_count = 0;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <debouncerbut3+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
				return 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <debouncerbut3+0x90>
			}
		}
	}
	return 0;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000007d 	.word	0x2000007d
 8000f04:	20000080 	.word	0x20000080

08000f08 <debouncerbut4>:

int debouncerbut4(volatile int* button_int, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_number)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	4613      	mov	r3, r2
 8000f14:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d13b      	bne.n	8000f96 <debouncerbut4+0x8e>
	{
		if (button_count == 0)
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <debouncerbut4+0x98>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10b      	bne.n	8000f3e <debouncerbut4+0x36>
		{
			counter = HAL_GetTick();
 8000f26:	f001 fbf3 	bl	8002710 <HAL_GetTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <debouncerbut4+0x9c>)
 8000f30:	601a      	str	r2, [r3, #0]
			button_count++;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <debouncerbut4+0x98>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <debouncerbut4+0x98>)
 8000f3c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20)
 8000f3e:	f001 fbe7 	bl	8002710 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <debouncerbut4+0x9c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b13      	cmp	r3, #19
 8000f4c:	d923      	bls.n	8000f96 <debouncerbut4+0x8e>
		{
			counter = HAL_GetTick();
 8000f4e:	f001 fbdf 	bl	8002710 <HAL_GetTick>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <debouncerbut4+0x9c>)
 8000f58:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_Port, GPIO_number) != 1)
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68b8      	ldr	r0, [r7, #8]
 8000f60:	f002 fb8c 	bl	800367c <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d003      	beq.n	8000f72 <debouncerbut4+0x6a>
			{
				button_count = 1;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <debouncerbut4+0x98>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e005      	b.n	8000f7e <debouncerbut4+0x76>
			}
			else
				button_count++;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <debouncerbut4+0x98>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <debouncerbut4+0x98>)
 8000f7c:	701a      	strb	r2, [r3, #0]
			if (button_count == 4)
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <debouncerbut4+0x98>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d107      	bne.n	8000f96 <debouncerbut4+0x8e>
			{ //Periodo Antirrebotes
				button_count = 0;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <debouncerbut4+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
				return 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <debouncerbut4+0x90>
			}
		}
	}
	return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000084 	.word	0x20000084
 8000fa4:	20000088 	.word	0x20000088

08000fa8 <debouncerbut6>:

int debouncerbut6(volatile int* button_int, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_number)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d13b      	bne.n	8001036 <debouncerbut6+0x8e>
	{
		if (button_count == 0)
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <debouncerbut6+0x98>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10b      	bne.n	8000fde <debouncerbut6+0x36>
		{
			counter = HAL_GetTick();
 8000fc6:	f001 fba3 	bl	8002710 <HAL_GetTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <debouncerbut6+0x9c>)
 8000fd0:	601a      	str	r2, [r3, #0]
			button_count++;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <debouncerbut6+0x98>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <debouncerbut6+0x98>)
 8000fdc:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20)
 8000fde:	f001 fb97 	bl	8002710 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <debouncerbut6+0x9c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b13      	cmp	r3, #19
 8000fec:	d923      	bls.n	8001036 <debouncerbut6+0x8e>
		{
			counter = HAL_GetTick();
 8000fee:	f001 fb8f 	bl	8002710 <HAL_GetTick>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <debouncerbut6+0x9c>)
 8000ff8:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_Port, GPIO_number) != 1)
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f002 fb3c 	bl	800367c <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d003      	beq.n	8001012 <debouncerbut6+0x6a>
			{
				button_count = 1;
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <debouncerbut6+0x98>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e005      	b.n	800101e <debouncerbut6+0x76>
			}
			else
				button_count++;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <debouncerbut6+0x98>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <debouncerbut6+0x98>)
 800101c:	701a      	strb	r2, [r3, #0]
			if (button_count == 4)
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <debouncerbut6+0x98>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b04      	cmp	r3, #4
 8001024:	d107      	bne.n	8001036 <debouncerbut6+0x8e>
			{ //Periodo Antirrebotes
				button_count = 0;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <debouncerbut6+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
				return 1;
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <debouncerbut6+0x90>
			}
		}
	}
	return 0;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000008c 	.word	0x2000008c
 8001044:	20000090 	.word	0x20000090

08001048 <debouncerbut5>:

int debouncerbut5(volatile int* button_int, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_number)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d13b      	bne.n	80010d6 <debouncerbut5+0x8e>
	{
		if (button_count == 0)
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <debouncerbut5+0x98>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10b      	bne.n	800107e <debouncerbut5+0x36>
		{
			counter = HAL_GetTick();
 8001066:	f001 fb53 	bl	8002710 <HAL_GetTick>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <debouncerbut5+0x9c>)
 8001070:	601a      	str	r2, [r3, #0]
			button_count++;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <debouncerbut5+0x98>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <debouncerbut5+0x98>)
 800107c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20)
 800107e:	f001 fb47 	bl	8002710 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <debouncerbut5+0x9c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b13      	cmp	r3, #19
 800108c:	d923      	bls.n	80010d6 <debouncerbut5+0x8e>
		{
			counter = HAL_GetTick();
 800108e:	f001 fb3f 	bl	8002710 <HAL_GetTick>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <debouncerbut5+0x9c>)
 8001098:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_Port, GPIO_number) != 1)
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4619      	mov	r1, r3
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f002 faec 	bl	800367c <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d003      	beq.n	80010b2 <debouncerbut5+0x6a>
			{
				button_count = 1;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <debouncerbut5+0x98>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e005      	b.n	80010be <debouncerbut5+0x76>
			}
			else
				button_count++;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <debouncerbut5+0x98>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <debouncerbut5+0x98>)
 80010bc:	701a      	strb	r2, [r3, #0]
			if (button_count == 4)
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <debouncerbut5+0x98>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d107      	bne.n	80010d6 <debouncerbut5+0x8e>
			{ //Periodo Antirrebotes
				button_count = 0;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <debouncerbut5+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
				return 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <debouncerbut5+0x90>
			}
		}
	}
	return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000094 	.word	0x20000094
 80010e4:	20000098 	.word	0x20000098

080010e8 <lightOnOFF>:

void lightOnOFF(int t)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if(t==1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d116      	bne.n	8001124 <lightOnOFF+0x3c>
	{
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	4817      	ldr	r0, [pc, #92]	; (8001158 <lightOnOFF+0x70>)
 80010fc:	f002 fad6 	bl	80036ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);
 8001100:	2201      	movs	r2, #1
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	4814      	ldr	r0, [pc, #80]	; (8001158 <lightOnOFF+0x70>)
 8001106:	f002 fad1 	bl	80036ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001110:	4811      	ldr	r0, [pc, #68]	; (8001158 <lightOnOFF+0x70>)
 8001112:	f002 facb 	bl	80036ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,1);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111c:	480f      	ldr	r0, [pc, #60]	; (800115c <lightOnOFF+0x74>)
 800111e:	f002 fac5 	bl	80036ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0);
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,0);
	}

}
 8001122:	e015      	b.n	8001150 <lightOnOFF+0x68>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 8001124:	2200      	movs	r2, #0
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <lightOnOFF+0x70>)
 800112a:	f002 fabf 	bl	80036ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0);
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <lightOnOFF+0x70>)
 8001134:	f002 faba 	bl	80036ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <lightOnOFF+0x70>)
 8001140:	f002 fab4 	bl	80036ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,0);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	4804      	ldr	r0, [pc, #16]	; (800115c <lightOnOFF+0x74>)
 800114c:	f002 faae 	bl	80036ac <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00

08001160 <LucesExteriores>:

void LucesExteriores(void)  //FUNCIONAMIENTO LUCES EXTERIORES
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	 if((debouncerbut6(&but2,GPIOE,GPIO_PIN_14))==1)
 8001164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <LucesExteriores+0xe0>)
 800116a:	4836      	ldr	r0, [pc, #216]	; (8001244 <LucesExteriores+0xe4>)
 800116c:	f7ff ff1c 	bl	8000fa8 <debouncerbut6>
 8001170:	4603      	mov	r3, r0
 8001172:	2b01      	cmp	r3, #1
 8001174:	d110      	bne.n	8001198 <LucesExteriores+0x38>
	 {
		  if(mode_light==1)
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <LucesExteriores+0xe8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d106      	bne.n	800118c <LucesExteriores+0x2c>
		  {
			  mode_light=0;
 800117e:	4b32      	ldr	r3, [pc, #200]	; (8001248 <LucesExteriores+0xe8>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
			  state_light=0;
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <LucesExteriores+0xec>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e005      	b.n	8001198 <LucesExteriores+0x38>
	  	  }
		  else
		  {
	  		mode_light=1;
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <LucesExteriores+0xe8>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]
			  lightOnOFF(0); //Aquiiii
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff ffa8 	bl	80010e8 <lightOnOFF>
		  }
	 }
	 if ((debouncerbut5(&but1,GPIOE,GPIO_PIN_15))==1 && mode_light==0  )
 8001198:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800119c:	4928      	ldr	r1, [pc, #160]	; (8001240 <LucesExteriores+0xe0>)
 800119e:	482c      	ldr	r0, [pc, #176]	; (8001250 <LucesExteriores+0xf0>)
 80011a0:	f7ff ff52 	bl	8001048 <debouncerbut5>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d11a      	bne.n	80011e0 <LucesExteriores+0x80>
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <LucesExteriores+0xe8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d116      	bne.n	80011e0 <LucesExteriores+0x80>
	 {
		  if(state_light==1 && mode_light ==0)
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <LucesExteriores+0xec>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d107      	bne.n	80011ca <LucesExteriores+0x6a>
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <LucesExteriores+0xe8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <LucesExteriores+0x6a>
		  { ///AQui
			  state_light=0;
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <LucesExteriores+0xec>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e00a      	b.n	80011e0 <LucesExteriores+0x80>
	  	  }
		  else if(state_light==0 && mode_light==0)
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <LucesExteriores+0xec>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <LucesExteriores+0x80>
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <LucesExteriores+0xe8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <LucesExteriores+0x80>
		  { //Aqui
	  		state_light=1;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <LucesExteriores+0xec>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(mode_light==1)
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <LucesExteriores+0xe8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d115      	bne.n	8001214 <LucesExteriores+0xb4>
	  {
		  HAL_ADC_Start_IT(&hadc2);
 80011e8:	481a      	ldr	r0, [pc, #104]	; (8001254 <LucesExteriores+0xf4>)
 80011ea:	f001 fb03 	bl	80027f4 <HAL_ADC_Start_IT>
		  if (ADC_vali < 20)
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <LucesExteriores+0xf8>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	2b13      	cmp	r3, #19
 80011f6:	d803      	bhi.n	8001200 <LucesExteriores+0xa0>
		  {
			  lightOnOFF(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff ff75 	bl	80010e8 <lightOnOFF>
 80011fe:	e002      	b.n	8001206 <LucesExteriores+0xa6>
		  }
		  else
		  {
			  lightOnOFF(0);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff71 	bl	80010e8 <lightOnOFF>
		  }
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <LucesExteriores+0xfc>)
 800120e:	f002 fa4d 	bl	80036ac <HAL_GPIO_WritePin>
		  if(state_light==1)
			  lightOnOFF(1);
		  else
			  lightOnOFF(0);
	  }
}
 8001212:	e013      	b.n	800123c <LucesExteriores+0xdc>
		  HAL_ADC_Stop_IT(&hadc2);
 8001214:	480f      	ldr	r0, [pc, #60]	; (8001254 <LucesExteriores+0xf4>)
 8001216:	f001 fbbd 	bl	8002994 <HAL_ADC_Stop_IT>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001220:	480e      	ldr	r0, [pc, #56]	; (800125c <LucesExteriores+0xfc>)
 8001222:	f002 fa43 	bl	80036ac <HAL_GPIO_WritePin>
		  if(state_light==1)
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <LucesExteriores+0xec>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <LucesExteriores+0xd6>
			  lightOnOFF(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff ff5a 	bl	80010e8 <lightOnOFF>
}
 8001234:	e002      	b.n	800123c <LucesExteriores+0xdc>
			  lightOnOFF(0);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff ff56 	bl	80010e8 <lightOnOFF>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	20000050 	.word	0x20000050
 8001248:	20000058 	.word	0x20000058
 800124c:	20000054 	.word	0x20000054
 8001250:	2000004c 	.word	0x2000004c
 8001254:	200000e4 	.word	0x200000e4
 8001258:	20000004 	.word	0x20000004
 800125c:	40020c00 	.word	0x40020c00

08001260 <garagecontrol>:

void garagecontrol(void)  //FUNCIONAMIENTO GARAGE
{
 8001260:	b598      	push	{r3, r4, r7, lr}
 8001262:	af00      	add	r7, sp, #0
	 if((debouncerbut3(&but3,GPIOA,GPIO_PIN_0))==1)
 8001264:	2201      	movs	r2, #1
 8001266:	4968      	ldr	r1, [pc, #416]	; (8001408 <garagecontrol+0x1a8>)
 8001268:	4868      	ldr	r0, [pc, #416]	; (800140c <garagecontrol+0x1ac>)
 800126a:	f7ff fdfd 	bl	8000e68 <debouncerbut3>
 800126e:	4603      	mov	r3, r0
 8001270:	2b01      	cmp	r3, #1
 8001272:	d116      	bne.n	80012a2 <garagecontrol+0x42>
	 {
		  if(sense==1 && aperture==1)
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <garagecontrol+0x1b0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <garagecontrol+0x2c>
 800127c:	4b65      	ldr	r3, [pc, #404]	; (8001414 <garagecontrol+0x1b4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d103      	bne.n	800128c <garagecontrol+0x2c>
		  {
			  sense=0;
 8001284:	4b62      	ldr	r3, [pc, #392]	; (8001410 <garagecontrol+0x1b0>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e00a      	b.n	80012a2 <garagecontrol+0x42>
	  	  }
		  else if (sense==0 && aperture==1)
 800128c:	4b60      	ldr	r3, [pc, #384]	; (8001410 <garagecontrol+0x1b0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d106      	bne.n	80012a2 <garagecontrol+0x42>
 8001294:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <garagecontrol+0x1b4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d102      	bne.n	80012a2 <garagecontrol+0x42>
		  {
	  		sense=1;
 800129c:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <garagecontrol+0x1b0>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
		  }
	 }
	 if ((debouncerbut4(&but4,GPIOA,GPIO_PIN_1))==1)
 80012a2:	2202      	movs	r2, #2
 80012a4:	4958      	ldr	r1, [pc, #352]	; (8001408 <garagecontrol+0x1a8>)
 80012a6:	485c      	ldr	r0, [pc, #368]	; (8001418 <garagecontrol+0x1b8>)
 80012a8:	f7ff fe2e 	bl	8000f08 <debouncerbut4>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d10d      	bne.n	80012ce <garagecontrol+0x6e>
	 {
		  if(aperture==1)
 80012b2:	4b58      	ldr	r3, [pc, #352]	; (8001414 <garagecontrol+0x1b4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <garagecontrol+0x68>
		  {
			  aperture=0;
 80012ba:	4b56      	ldr	r3, [pc, #344]	; (8001414 <garagecontrol+0x1b4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
			waitgarage=0;//---
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <garagecontrol+0x1bc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e002      	b.n	80012ce <garagecontrol+0x6e>
	  	  }
		  else
		  {
	  		aperture=1;
 80012c8:	4b52      	ldr	r3, [pc, #328]	; (8001414 <garagecontrol+0x1b4>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(anglegarage==0 && sense==0)
 80012ce:	4b54      	ldr	r3, [pc, #336]	; (8001420 <garagecontrol+0x1c0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d125      	bne.n	8001322 <garagecontrol+0xc2>
 80012d6:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <garagecontrol+0x1b0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d121      	bne.n	8001322 <garagecontrol+0xc2>
	  {
		  if(waitgarage==0 && aperture==1 )//_-
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <garagecontrol+0x1bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <garagecontrol+0x9a>
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <garagecontrol+0x1b4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <garagecontrol+0x9a>
			  waitgarage = HAL_GetTick();
 80012ee:	f001 fa0f 	bl	8002710 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b49      	ldr	r3, [pc, #292]	; (800141c <garagecontrol+0x1bc>)
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e013      	b.n	8001322 <garagecontrol+0xc2>
		  else if(HAL_GetTick()-waitgarage >= 10000  &&  aperture==1)
 80012fa:	f001 fa09 	bl	8002710 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <garagecontrol+0x1bc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f242 720f 	movw	r2, #9999	; 0x270f
 800130a:	4293      	cmp	r3, r2
 800130c:	d909      	bls.n	8001322 <garagecontrol+0xc2>
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <garagecontrol+0x1b4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d105      	bne.n	8001322 <garagecontrol+0xc2>
		  {
			sense=1;
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <garagecontrol+0x1b0>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
			waitgarage=0;
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <garagecontrol+0x1bc>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if((HAL_GetTick()-timegarage )>=20 && aperture==1)
 8001322:	f001 f9f5 	bl	8002710 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <garagecontrol+0x1c4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b13      	cmp	r3, #19
 8001330:	d92e      	bls.n	8001390 <garagecontrol+0x130>
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <garagecontrol+0x1b4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d12a      	bne.n	8001390 <garagecontrol+0x130>
	  {
		  if(anglegarage<90 && sense==1)
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <garagecontrol+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b59      	cmp	r3, #89	; 0x59
 8001340:	dc11      	bgt.n	8001366 <garagecontrol+0x106>
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <garagecontrol+0x1b0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10d      	bne.n	8001366 <garagecontrol+0x106>
		  {
			  anglegarage++;
 800134a:	4b35      	ldr	r3, [pc, #212]	; (8001420 <garagecontrol+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a33      	ldr	r2, [pc, #204]	; (8001420 <garagecontrol+0x1c0>)
 8001352:	6013      	str	r3, [r2, #0]
			  waitgarage=0;
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <garagecontrol+0x1bc>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
			  timegarage=HAL_GetTick();
 800135a:	f001 f9d9 	bl	8002710 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <garagecontrol+0x1c4>)
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e014      	b.n	8001390 <garagecontrol+0x130>
		  }
		  else if(anglegarage> 0 && sense==0)
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <garagecontrol+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	dd10      	ble.n	8001390 <garagecontrol+0x130>
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <garagecontrol+0x1b0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <garagecontrol+0x130>
		  {
			  anglegarage--;
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <garagecontrol+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	4a28      	ldr	r2, [pc, #160]	; (8001420 <garagecontrol+0x1c0>)
 800137e:	6013      	str	r3, [r2, #0]
			  waitgarage=0;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <garagecontrol+0x1bc>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
			  timegarage=HAL_GetTick();
 8001386:	f001 f9c3 	bl	8002710 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <garagecontrol+0x1c4>)
 800138e:	601a      	str	r2, [r3, #0]
		  }
	  }
	  servoinput = (RANGE*anglegarage)+500;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <garagecontrol+0x1c0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f869 	bl	800046c <__aeabi_i2d>
 800139a:	a319      	add	r3, pc, #100	; (adr r3, 8001400 <garagecontrol+0x1a0>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f8ce 	bl	8000540 <__aeabi_dmul>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	4618      	mov	r0, r3
 80013aa:	4621      	mov	r1, r4
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <garagecontrol+0x1c8>)
 80013b2:	f7fe ff0f 	bl	80001d4 <__adddf3>
 80013b6:	4603      	mov	r3, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	4618      	mov	r0, r3
 80013bc:	4621      	mov	r1, r4
 80013be:	f7ff faf1 	bl	80009a4 <__aeabi_d2f>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <garagecontrol+0x1cc>)
 80013c6:	601a      	str	r2, [r3, #0]
 	  htim2.Instance->CCR4 = servoinput;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <garagecontrol+0x1cc>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <garagecontrol+0x1d0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
 	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, !aperture);
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <garagecontrol+0x1b4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf0c      	ite	eq
 80013e4:	2301      	moveq	r3, #1
 80013e6:	2300      	movne	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <garagecontrol+0x1d4>)
 80013f2:	f002 f95b 	bl	80036ac <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	bd98      	pop	{r3, r4, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	33333333 	.word	0x33333333
 8001404:	40263333 	.word	0x40263333
 8001408:	40020000 	.word	0x40020000
 800140c:	20000044 	.word	0x20000044
 8001410:	2000003c 	.word	0x2000003c
 8001414:	20000038 	.word	0x20000038
 8001418:	20000048 	.word	0x20000048
 800141c:	2000012c 	.word	0x2000012c
 8001420:	20000000 	.word	0x20000000
 8001424:	200000e0 	.word	0x200000e0
 8001428:	407f4000 	.word	0x407f4000
 800142c:	20000040 	.word	0x20000040
 8001430:	20000244 	.word	0x20000244
 8001434:	40020800 	.word	0x40020800

08001438 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint8_t Distance  = 100;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)  //FUNCION QUE MIDE DISTANCIAS ULTRASONIDOS
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7f1b      	ldrb	r3, [r3, #28]
 8001444:	2b01      	cmp	r3, #1
 8001446:	f040 8083 	bne.w	8001550 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800144a:	4b45      	ldr	r3, [pc, #276]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x128>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11a      	bne.n	8001488 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001452:	2100      	movs	r1, #0
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f003 fa01 	bl	800485c <HAL_TIM_ReadCapturedValue>
 800145a:	4602      	mov	r2, r0
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800145e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001460:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 020a 	bic.w	r2, r2, #10
 8001474:	621a      	str	r2, [r3, #32]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a1a      	ldr	r2, [r3, #32]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0202 	orr.w	r2, r2, #2
 8001484:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001486:	e063      	b.n	8001550 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x128>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d15f      	bne.n	8001550 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001490:	2100      	movs	r1, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f003 f9e2 	bl	800485c <HAL_TIM_ReadCapturedValue>
 8001498:	4602      	mov	r2, r0
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x130>)
 800149c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d907      	bls.n	80014c2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a2b      	ldr	r2, [pc, #172]	; (800156c <HAL_TIM_IC_CaptureCallback+0x134>)
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e00f      	b.n	80014e2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d909      	bls.n	80014e2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014dc:	33ff      	adds	r3, #255	; 0xff
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <HAL_TIM_IC_CaptureCallback+0x134>)
 80014e0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_TIM_IC_CaptureCallback+0x134>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ffb0 	bl	800044c <__aeabi_ui2d>
 80014ec:	a31a      	add	r3, pc, #104	; (adr r3, 8001558 <HAL_TIM_IC_CaptureCallback+0x120>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f825 	bl	8000540 <__aeabi_dmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	460c      	mov	r4, r1
 80014fa:	4618      	mov	r0, r3
 80014fc:	4621      	mov	r1, r4
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001506:	f7ff f945 	bl	8000794 <__aeabi_ddiv>
 800150a:	4603      	mov	r3, r0
 800150c:	460c      	mov	r4, r1
 800150e:	4618      	mov	r0, r3
 8001510:	4621      	mov	r1, r4
 8001512:	f7ff fa27 	bl	8000964 <__aeabi_d2uiz>
 8001516:	4603      	mov	r3, r0
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x138>)
 800151c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a1a      	ldr	r2, [r3, #32]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 020a 	bic.w	r2, r2, #10
 8001532:	621a      	str	r2, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a12      	ldr	r2, [r2, #32]
 800153e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0202 	bic.w	r2, r2, #2
 800154e:	60da      	str	r2, [r3, #12]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	b020c49c 	.word	0xb020c49c
 800155c:	3fa16872 	.word	0x3fa16872
 8001560:	2000007c 	.word	0x2000007c
 8001564:	20000070 	.word	0x20000070
 8001568:	20000074 	.word	0x20000074
 800156c:	20000078 	.word	0x20000078
 8001570:	2000000c 	.word	0x2000000c
 8001574:	200001c0 	.word	0x200001c0

08001578 <HCSR04_Read>:

void HCSR04_Read (void)  //FUNCION EMISION ONDA ULTRASONIDO
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800157c:	2201      	movs	r2, #1
 800157e:	2110      	movs	r1, #16
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <HCSR04_Read+0x34>)
 8001582:	f002 f893 	bl	80036ac <HAL_GPIO_WritePin>
	HAL_Delay(10);  // wait for 10 us
 8001586:	200a      	movs	r0, #10
 8001588:	f001 f8ce 	bl	8002728 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // pull the TRIG pin low
 800158c:	2200      	movs	r2, #0
 800158e:	2110      	movs	r1, #16
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <HCSR04_Read+0x34>)
 8001592:	f002 f88b 	bl	80036ac <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HCSR04_Read+0x38>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HCSR04_Read+0x38>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0202 	orr.w	r2, r2, #2
 80015a4:	60da      	str	r2, [r3, #12]
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020000 	.word	0x40020000
 80015b0:	200001c0 	.word	0x200001c0

080015b4 <CAMARA_SEGURIDAD>:
  	  }
return 0;
}

void CAMARA_SEGURIDAD(void)  //FUNCIONAMIENTO CAMARA SEGURIDAD
{
 80015b4:	b598      	push	{r3, r4, r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	//HCSR04_Read();

	if(n<=4000000)
 80015b8:	4ba4      	ldr	r3, [pc, #656]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4aa4      	ldr	r2, [pc, #656]	; (8001850 <CAMARA_SEGURIDAD+0x29c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	f300 8142 	bgt.w	8001848 <CAMARA_SEGURIDAD+0x294>
	{
	  if( (HAL_GetTick() - tiempo_total_interrupcion) > n  && (HAL_GetTick() - tiempo_total_interrupcion) < (20000+n) && flag==0 && Distance >=20 )
 80015c4:	f001 f8a4 	bl	8002710 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4ba2      	ldr	r3, [pc, #648]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	4a9e      	ldr	r2, [pc, #632]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d936      	bls.n	8001646 <CAMARA_SEGURIDAD+0x92>
 80015d8:	f001 f89a 	bl	8002710 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b9d      	ldr	r3, [pc, #628]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1ad2      	subs	r2, r2, r3
 80015e4:	4b99      	ldr	r3, [pc, #612]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80015ec:	3320      	adds	r3, #32
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d229      	bcs.n	8001646 <CAMARA_SEGURIDAD+0x92>
 80015f2:	4b99      	ldr	r3, [pc, #612]	; (8001858 <CAMARA_SEGURIDAD+0x2a4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d125      	bne.n	8001646 <CAMARA_SEGURIDAD+0x92>
 80015fa:	4b98      	ldr	r3, [pc, #608]	; (800185c <CAMARA_SEGURIDAD+0x2a8>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b13      	cmp	r3, #19
 8001600:	d921      	bls.n	8001646 <CAMARA_SEGURIDAD+0x92>
	  {
		  angulo1=(((HAL_GetTick() - tiempo_total_interrupcion -n) / 10 ) + 500);
 8001602:	f001 f885 	bl	8002710 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	4b92      	ldr	r3, [pc, #584]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a8f      	ldr	r2, [pc, #572]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	4a92      	ldr	r2, [pc, #584]	; (8001860 <CAMARA_SEGURIDAD+0x2ac>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	08db      	lsrs	r3, r3, #3
 800161c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001620:	461a      	mov	r2, r3
 8001622:	4b90      	ldr	r3, [pc, #576]	; (8001864 <CAMARA_SEGURIDAD+0x2b0>)
 8001624:	601a      	str	r2, [r3, #0]
		  htim4.Instance->CCR1=angulo1; //0
 8001626:	4b8f      	ldr	r3, [pc, #572]	; (8001864 <CAMARA_SEGURIDAD+0x2b0>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b8f      	ldr	r3, [pc, #572]	; (8001868 <CAMARA_SEGURIDAD+0x2b4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	635a      	str	r2, [r3, #52]	; 0x34
		  timer=(HAL_GetTick() - tiempo_total_interrupcion);
 8001630:	f001 f86e 	bl	8002710 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	4b87      	ldr	r3, [pc, #540]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4b8b      	ldr	r3, [pc, #556]	; (800186c <CAMARA_SEGURIDAD+0x2b8>)
 8001640:	601a      	str	r2, [r3, #0]
		  HCSR04_Read();
 8001642:	f7ff ff99 	bl	8001578 <HCSR04_Read>
	  }

	 if(flag==0 && Distance >=20  &&  (HAL_GetTick() - tiempo_total_interrupcion) >= (20000+n) && (HAL_GetTick() - tiempo_total_interrupcion) <= (25000+n) )
 8001646:	4b84      	ldr	r3, [pc, #528]	; (8001858 <CAMARA_SEGURIDAD+0x2a4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11f      	bne.n	800168e <CAMARA_SEGURIDAD+0xda>
 800164e:	4b83      	ldr	r3, [pc, #524]	; (800185c <CAMARA_SEGURIDAD+0x2a8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b13      	cmp	r3, #19
 8001654:	d91b      	bls.n	800168e <CAMARA_SEGURIDAD+0xda>
 8001656:	f001 f85b 	bl	8002710 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	4b7d      	ldr	r3, [pc, #500]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1ad2      	subs	r2, r2, r3
 8001662:	4b7a      	ldr	r3, [pc, #488]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800166a:	3320      	adds	r3, #32
 800166c:	429a      	cmp	r2, r3
 800166e:	d30e      	bcc.n	800168e <CAMARA_SEGURIDAD+0xda>
 8001670:	f001 f84e 	bl	8002710 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	4b77      	ldr	r3, [pc, #476]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1ad2      	subs	r2, r2, r3
 800167c:	4b73      	ldr	r3, [pc, #460]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8001684:	3328      	adds	r3, #40	; 0x28
 8001686:	429a      	cmp	r2, r3
 8001688:	d801      	bhi.n	800168e <CAMARA_SEGURIDAD+0xda>
	 {
		 HCSR04_Read();
 800168a:	f7ff ff75 	bl	8001578 <HCSR04_Read>
	 }

	 if ( (25000+n) < (HAL_GetTick() - tiempo_total_interrupcion)  && (HAL_GetTick() - tiempo_total_interrupcion) < (45000+n) && Distance >=20  && flag==0)
 800168e:	4b6f      	ldr	r3, [pc, #444]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8001696:	3328      	adds	r3, #40	; 0x28
 8001698:	461c      	mov	r4, r3
 800169a:	f001 f839 	bl	8002710 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	429c      	cmp	r4, r3
 80016a8:	d238      	bcs.n	800171c <CAMARA_SEGURIDAD+0x168>
 80016aa:	f001 f831 	bl	8002710 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b68      	ldr	r3, [pc, #416]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1ad2      	subs	r2, r2, r3
 80016b6:	4b65      	ldr	r3, [pc, #404]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 80016be:	33c8      	adds	r3, #200	; 0xc8
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d22b      	bcs.n	800171c <CAMARA_SEGURIDAD+0x168>
 80016c4:	4b65      	ldr	r3, [pc, #404]	; (800185c <CAMARA_SEGURIDAD+0x2a8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b13      	cmp	r3, #19
 80016ca:	d927      	bls.n	800171c <CAMARA_SEGURIDAD+0x168>
 80016cc:	4b62      	ldr	r3, [pc, #392]	; (8001858 <CAMARA_SEGURIDAD+0x2a4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d123      	bne.n	800171c <CAMARA_SEGURIDAD+0x168>
	 {
		  angulo2=( (  -(HAL_GetTick()) + tiempo_total_interrupcion + n + 50000  ) / 10 );
 80016d4:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461c      	mov	r4, r3
 80016da:	f001 f819 	bl	8002710 <HAL_GetTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	1ae3      	subs	r3, r4, r3
 80016e2:	4a5a      	ldr	r2, [pc, #360]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80016ec:	3350      	adds	r3, #80	; 0x50
 80016ee:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <CAMARA_SEGURIDAD+0x2ac>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <CAMARA_SEGURIDAD+0x2bc>)
 80016fa:	601a      	str	r2, [r3, #0]
		  htim4.Instance->CCR1=angulo2;
 80016fc:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <CAMARA_SEGURIDAD+0x2bc>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <CAMARA_SEGURIDAD+0x2b4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
		  timer=(HAL_GetTick() - tiempo_total_interrupcion);
 8001706:	f001 f803 	bl	8002710 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	4b51      	ldr	r3, [pc, #324]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4b55      	ldr	r3, [pc, #340]	; (800186c <CAMARA_SEGURIDAD+0x2b8>)
 8001716:	601a      	str	r2, [r3, #0]
		  HCSR04_Read();
 8001718:	f7ff ff2e 	bl	8001578 <HCSR04_Read>
	 }

	 if(flag==0 && Distance >=20  &&  (HAL_GetTick() - tiempo_total_interrupcion)  >= (45000+n)  &&  (HAL_GetTick() - tiempo_total_interrupcion) <= (50000+n))
 800171c:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <CAMARA_SEGURIDAD+0x2a4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d144      	bne.n	80017ae <CAMARA_SEGURIDAD+0x1fa>
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <CAMARA_SEGURIDAD+0x2a8>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b13      	cmp	r3, #19
 800172a:	d940      	bls.n	80017ae <CAMARA_SEGURIDAD+0x1fa>
 800172c:	f000 fff0 	bl	8002710 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	4b48      	ldr	r3, [pc, #288]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1ad2      	subs	r2, r2, r3
 8001738:	4b44      	ldr	r3, [pc, #272]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 8001740:	33c8      	adds	r3, #200	; 0xc8
 8001742:	429a      	cmp	r2, r3
 8001744:	d333      	bcc.n	80017ae <CAMARA_SEGURIDAD+0x1fa>
 8001746:	f000 ffe3 	bl	8002710 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	4b41      	ldr	r3, [pc, #260]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1ad2      	subs	r2, r2, r3
 8001752:	4b3e      	ldr	r3, [pc, #248]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800175a:	3350      	adds	r3, #80	; 0x50
 800175c:	429a      	cmp	r2, r3
 800175e:	d826      	bhi.n	80017ae <CAMARA_SEGURIDAD+0x1fa>
	 {
		HCSR04_Read();
 8001760:	f7ff ff0a 	bl	8001578 <HCSR04_Read>
		if(flag==0 && Distance >=20  &&    (HAL_GetTick() - tiempo_total_interrupcion)  >= (49900+n)  &&  (HAL_GetTick() - tiempo_total_interrupcion) <= (50000+n))
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <CAMARA_SEGURIDAD+0x2a4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d120      	bne.n	80017ae <CAMARA_SEGURIDAD+0x1fa>
 800176c:	4b3b      	ldr	r3, [pc, #236]	; (800185c <CAMARA_SEGURIDAD+0x2a8>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b13      	cmp	r3, #19
 8001772:	d91c      	bls.n	80017ae <CAMARA_SEGURIDAD+0x1fa>
 8001774:	f000 ffcc 	bl	8002710 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	1ad2      	subs	r2, r2, r3
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 8001788:	33ec      	adds	r3, #236	; 0xec
 800178a:	429a      	cmp	r2, r3
 800178c:	d30f      	bcc.n	80017ae <CAMARA_SEGURIDAD+0x1fa>
 800178e:	f000 ffbf 	bl	8002710 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1ad2      	subs	r2, r2, r3
 800179a:	4b2c      	ldr	r3, [pc, #176]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80017a2:	3350      	adds	r3, #80	; 0x50
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d802      	bhi.n	80017ae <CAMARA_SEGURIDAD+0x1fa>
		{	bit_trabajo=0; }
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <CAMARA_SEGURIDAD+0x2c0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
	 }

	 if (bit_trabajo == 0)
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <CAMARA_SEGURIDAD+0x2c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <CAMARA_SEGURIDAD+0x222>
 	 {
 		  n=n+50000;
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80017be:	3350      	adds	r3, #80	; 0x50
 80017c0:	4a22      	ldr	r2, [pc, #136]	; (800184c <CAMARA_SEGURIDAD+0x298>)
 80017c2:	6013      	str	r3, [r2, #0]
 		  bit_trabajo=1;
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <CAMARA_SEGURIDAD+0x2c0>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
 		  angulo1=0;angulo2=0;
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <CAMARA_SEGURIDAD+0x2b0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <CAMARA_SEGURIDAD+0x2bc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 	 }

	 if(desactivar_alarma==1)
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <CAMARA_SEGURIDAD+0x2c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d108      	bne.n	80017f0 <CAMARA_SEGURIDAD+0x23c>
	 {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 , 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e4:	4825      	ldr	r0, [pc, #148]	; (800187c <CAMARA_SEGURIDAD+0x2c8>)
 80017e6:	f001 ff61 	bl	80036ac <HAL_GPIO_WritePin>
		  desactivar_alarma=0;
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <CAMARA_SEGURIDAD+0x2c4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
	 }

	 if(Distance < 20 || flag==1 )  //INTERRUPCION POR OBSTACULO Y/O CAMARA QUIETA
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <CAMARA_SEGURIDAD+0x2a8>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b13      	cmp	r3, #19
 80017f6:	d903      	bls.n	8001800 <CAMARA_SEGURIDAD+0x24c>
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <CAMARA_SEGURIDAD+0x2a4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d123      	bne.n	8001848 <CAMARA_SEGURIDAD+0x294>
	 {
	  	  tiempo_comienzo_interrupcion=HAL_GetTick();
 8001800:	f000 ff86 	bl	8002710 <HAL_GetTick>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <CAMARA_SEGURIDAD+0x2cc>)
 800180a:	601a      	str	r2, [r3, #0]
	  	  HCSR04_Read();
 800180c:	f7ff feb4 	bl	8001578 <HCSR04_Read>
	  	  if (Distance < 20 )
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <CAMARA_SEGURIDAD+0x2a8>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b13      	cmp	r3, #19
 8001816:	d807      	bhi.n	8001828 <CAMARA_SEGURIDAD+0x274>
	  	  {
	  	    	HCSR04_Read();
 8001818:	f7ff feae 	bl	8001578 <HCSR04_Read>
	  	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 , 1);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	4816      	ldr	r0, [pc, #88]	; (800187c <CAMARA_SEGURIDAD+0x2c8>)
 8001824:	f001 ff42 	bl	80036ac <HAL_GPIO_WritePin>
	  	  }
	  	  tiempo_final_interrupcion= HAL_GetTick();
 8001828:	f000 ff72 	bl	8002710 <HAL_GetTick>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <CAMARA_SEGURIDAD+0x2d0>)
 8001832:	601a      	str	r2, [r3, #0]
	  	  tiempo_total_interrupcion=  (tiempo_final_interrupcion - tiempo_comienzo_interrupcion) + tiempo_total_interrupcion;
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <CAMARA_SEGURIDAD+0x2d0>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <CAMARA_SEGURIDAD+0x2cc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	1ad2      	subs	r2, r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <CAMARA_SEGURIDAD+0x2a0>)
 8001846:	6013      	str	r3, [r2, #0]
	 }

	}
}
 8001848:	bf00      	nop
 800184a:	bd98      	pop	{r3, r4, r7, pc}
 800184c:	20000068 	.word	0x20000068
 8001850:	003d0900 	.word	0x003d0900
 8001854:	20000064 	.word	0x20000064
 8001858:	20000130 	.word	0x20000130
 800185c:	2000000c 	.word	0x2000000c
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	20000284 	.word	0x20000284
 8001868:	200000a0 	.word	0x200000a0
 800186c:	2000009c 	.word	0x2000009c
 8001870:	2000017c 	.word	0x2000017c
 8001874:	20000008 	.word	0x20000008
 8001878:	2000006c 	.word	0x2000006c
 800187c:	40020c00 	.word	0x40020c00
 8001880:	2000005c 	.word	0x2000005c
 8001884:	20000060 	.word	0x20000060

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188c:	f000 feda 	bl	8002644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001890:	f000 f83e 	bl	8001910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f000 fb26 	bl	8001ee4 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001898:	f000 fa8c 	bl	8001db4 <MX_TIM6_Init>
  MX_TIM2_Init();
 800189c:	f000 f99c 	bl	8001bd8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80018a0:	f000 f944 	bl	8001b2c <MX_TIM1_Init>
  MX_TIM4_Init();
 80018a4:	f000 fa0e 	bl	8001cc4 <MX_TIM4_Init>
  MX_ADC2_Init();
 80018a8:	f000 f8ee 	bl	8001a88 <MX_ADC2_Init>
  MX_ADC1_Init();
 80018ac:	f000 f89a 	bl	80019e4 <MX_ADC1_Init>
  MX_TIM9_Init();
 80018b0:	f000 fab6 	bl	8001e20 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <main+0x70>)
 80018b6:	f002 fb84 	bl	8003fc2 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start (&htim9, TIM_CHANNEL_2);
 80018ba:	2104      	movs	r1, #4
 80018bc:	480f      	ldr	r0, [pc, #60]	; (80018fc <main+0x74>)
 80018be:	f002 fbd9 	bl	8004074 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_4);
 80018c2:	210c      	movs	r1, #12
 80018c4:	480e      	ldr	r0, [pc, #56]	; (8001900 <main+0x78>)
 80018c6:	f002 fbd5 	bl	8004074 <HAL_TIM_PWM_Start>
  timegarage = HAL_GetTick();
 80018ca:	f000 ff21 	bl	8002710 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <main+0x7c>)
 80018d2:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80018d4:	2100      	movs	r1, #0
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <main+0x80>)
 80018d8:	f002 fbcc 	bl	8004074 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80018dc:	2100      	movs	r1, #0
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <main+0x84>)
 80018e0:	f002 fc32 	bl	8004148 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	LucesExteriores();
 80018e4:	f7ff fc3c 	bl	8001160 <LucesExteriores>
	Ventilador();
 80018e8:	f7ff fa58 	bl	8000d9c <Ventilador>
	garagecontrol();
 80018ec:	f7ff fcb8 	bl	8001260 <garagecontrol>
	CAMARA_SEGURIDAD();
 80018f0:	f7ff fe60 	bl	80015b4 <CAMARA_SEGURIDAD>
	LucesExteriores();
 80018f4:	e7f6      	b.n	80018e4 <main+0x5c>
 80018f6:	bf00      	nop
 80018f8:	20000180 	.word	0x20000180
 80018fc:	20000204 	.word	0x20000204
 8001900:	20000244 	.word	0x20000244
 8001904:	200000e0 	.word	0x200000e0
 8001908:	200000a0 	.word	0x200000a0
 800190c:	200001c0 	.word	0x200001c0

08001910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b094      	sub	sp, #80	; 0x50
 8001914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	2230      	movs	r2, #48	; 0x30
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fcf6 	bl	8005310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <SystemClock_Config+0xcc>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <SystemClock_Config+0xcc>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <SystemClock_Config+0xcc>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <SystemClock_Config+0xd0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <SystemClock_Config+0xd0>)
 800195a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <SystemClock_Config+0xd0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001970:	2301      	movs	r3, #1
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001974:	2310      	movs	r3, #16
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001978:	2302      	movs	r3, #2
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800197c:	2300      	movs	r3, #0
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001980:	2308      	movs	r3, #8
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001984:	2348      	movs	r3, #72	; 0x48
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001988:	2302      	movs	r3, #2
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	4618      	mov	r0, r3
 8001996:	f001 febb 	bl	8003710 <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019a0:	f000 fbb8 	bl	8002114 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a4:	230f      	movs	r3, #15
 80019a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a8:	2302      	movs	r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	2102      	movs	r1, #2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 f914 	bl	8003bf0 <HAL_RCC_ClockConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ce:	f000 fba1 	bl	8002114 <Error_Handler>
  }
}
 80019d2:	bf00      	nop
 80019d4:	3750      	adds	r7, #80	; 0x50
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_ADC1_Init+0x98>)
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <MX_ADC1_Init+0x9c>)
 80019fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_ADC1_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <MX_ADC1_Init+0xa0>)
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a46:	f000 fe91 	bl	800276c <HAL_ADC_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a50:	f000 fb60 	bl	8002114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a54:	2303      	movs	r3, #3
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a66:	f001 f935 	bl	8002cd4 <HAL_ADC_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a70:	f000 fb50 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000134 	.word	0x20000134
 8001a80:	40012000 	.word	0x40012000
 8001a84:	0f000001 	.word	0x0f000001

08001a88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a8e:	463b      	mov	r3, r7
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <MX_ADC2_Init+0x9c>)
 8001a9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <MX_ADC2_Init+0xa0>)
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ae8:	480d      	ldr	r0, [pc, #52]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001aea:	f000 fe3f 	bl	800276c <HAL_ADC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001af4:	f000 fb0e 	bl	8002114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001af8:	230b      	movs	r3, #11
 8001afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_ADC2_Init+0x98>)
 8001b0a:	f001 f8e3 	bl	8002cd4 <HAL_ADC_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001b14:	f000 fafe 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200000e4 	.word	0x200000e4
 8001b24:	40012100 	.word	0x40012100
 8001b28:	0f000001 	.word	0x0f000001

08001b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b4a:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <MX_TIM1_Init+0xa8>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50;
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b50:	2232      	movs	r2, #50	; 0x32
 8001b52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001b74:	4816      	ldr	r0, [pc, #88]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b76:	f002 fabb 	bl	80040f0 <HAL_TIM_IC_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b80:	f000 fac8 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4619      	mov	r1, r3
 8001b92:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001b94:	f003 fb08 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b9e:	f000 fab9 	bl	8002114 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_TIM1_Init+0xa4>)
 8001bba:	f002 fc35 	bl	8004428 <HAL_TIM_IC_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001bc4:	f000 faa6 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200001c0 	.word	0x200001c0
 8001bd4:	40010000 	.word	0x40010000

08001bd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c12:	2247      	movs	r2, #71	; 0x47
 8001c14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c30:	4823      	ldr	r0, [pc, #140]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c32:	f002 f99b 	bl	8003f6c <HAL_TIM_Base_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c3c:	f000 fa6a 	bl	8002114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481c      	ldr	r0, [pc, #112]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c4e:	f002 fd4d 	bl	80046ec <HAL_TIM_ConfigClockSource>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c58:	f000 fa5c 	bl	8002114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c5c:	4818      	ldr	r0, [pc, #96]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c5e:	f002 f9d4 	bl	800400a <HAL_TIM_PWM_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c68:	f000 fa54 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4811      	ldr	r0, [pc, #68]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c7c:	f003 fa94 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c86:	f000 fa45 	bl	8002114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	; 0x60
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001c8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001ca4:	f002 fc5c 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cae:	f000 fa31 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001cb4:	f000 fb92 	bl	80023dc <HAL_TIM_MspPostInit>

}
 8001cb8:	bf00      	nop
 8001cba:	3738      	adds	r7, #56	; 0x38
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000244 	.word	0x20000244

08001cc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd8:	f107 0320 	add.w	r3, r7, #32
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	615a      	str	r2, [r3, #20]
 8001cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001cf6:	4a2e      	ldr	r2, [pc, #184]	; (8001db0 <MX_TIM4_Init+0xec>)
 8001cf8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001cfc:	2248      	movs	r2, #72	; 0x48
 8001cfe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001d06:	4b29      	ldr	r3, [pc, #164]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d08:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d1a:	4824      	ldr	r0, [pc, #144]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d1c:	f002 f926 	bl	8003f6c <HAL_TIM_Base_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d26:	f000 f9f5 	bl	8002114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d34:	4619      	mov	r1, r3
 8001d36:	481d      	ldr	r0, [pc, #116]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d38:	f002 fcd8 	bl	80046ec <HAL_TIM_ConfigClockSource>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d42:	f000 f9e7 	bl	8002114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d46:	4819      	ldr	r0, [pc, #100]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d48:	f002 f95f 	bl	800400a <HAL_TIM_PWM_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d52:	f000 f9df 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	4619      	mov	r1, r3
 8001d64:	4811      	ldr	r0, [pc, #68]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d66:	f003 fa1f 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d70:	f000 f9d0 	bl	8002114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d74:	2360      	movs	r3, #96	; 0x60
 8001d76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001d78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d8e:	f002 fbe7 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001d98:	f000 f9bc 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <MX_TIM4_Init+0xe8>)
 8001d9e:	f000 fb1d 	bl	80023dc <HAL_TIM_MspPostInit>

}
 8001da2:	bf00      	nop
 8001da4:	3738      	adds	r7, #56	; 0x38
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200000a0 	.word	0x200000a0
 8001db0:	40000800 	.word	0x40000800

08001db4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dba:	463b      	mov	r3, r7
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_TIM6_Init+0x64>)
 8001dc4:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <MX_TIM6_Init+0x68>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_TIM6_Init+0x64>)
 8001dca:	2231      	movs	r2, #49	; 0x31
 8001dcc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_TIM6_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <MX_TIM6_Init+0x64>)
 8001dd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001dda:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_TIM6_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <MX_TIM6_Init+0x64>)
 8001de4:	f002 f8c2 	bl	8003f6c <HAL_TIM_Base_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001dee:	f000 f991 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <MX_TIM6_Init+0x64>)
 8001e00:	f003 f9d2 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e0a:	f000 f983 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000180 	.word	0x20000180
 8001e1c:	40001000 	.word	0x40001000

08001e20 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0320 	add.w	r3, r7, #32
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e48:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <MX_TIM9_Init+0xc0>)
 8001e4a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 36-1;
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e4e:	2223      	movs	r2, #35	; 0x23
 8001e50:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e5a:	2263      	movs	r2, #99	; 0x63
 8001e5c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e6a:	481c      	ldr	r0, [pc, #112]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e6c:	f002 f87e 	bl	8003f6c <HAL_TIM_Base_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8001e76:	f000 f94d 	bl	8002114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4619      	mov	r1, r3
 8001e86:	4815      	ldr	r0, [pc, #84]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e88:	f002 fc30 	bl	80046ec <HAL_TIM_ConfigClockSource>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8001e92:	f000 f93f 	bl	8002114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e96:	4811      	ldr	r0, [pc, #68]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001e98:	f002 f8b7 	bl	800400a <HAL_TIM_PWM_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8001ea2:	f000 f937 	bl	8002114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea6:	2360      	movs	r3, #96	; 0x60
 8001ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4807      	ldr	r0, [pc, #28]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001ebe:	f002 fb4f 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8001ec8:	f000 f924 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <MX_TIM9_Init+0xbc>)
 8001ece:	f000 fa85 	bl	80023dc <HAL_TIM_MspPostInit>

}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	; 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000204 	.word	0x20000204
 8001ee0:	40014000 	.word	0x40014000

08001ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	; 0x30
 8001ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a7d      	ldr	r2, [pc, #500]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b7b      	ldr	r3, [pc, #492]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	4b77      	ldr	r3, [pc, #476]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a76      	ldr	r2, [pc, #472]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b74      	ldr	r3, [pc, #464]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a6f      	ldr	r2, [pc, #444]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b69      	ldr	r3, [pc, #420]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a68      	ldr	r2, [pc, #416]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a61      	ldr	r2, [pc, #388]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a5a      	ldr	r2, [pc, #360]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <MX_GPIO_Init+0x214>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|TRIG_Pin, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2114      	movs	r1, #20
 8001fa6:	4855      	ldr	r0, [pc, #340]	; (80020fc <MX_GPIO_Init+0x218>)
 8001fa8:	f001 fb80 	bl	80036ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001fb2:	4853      	ldr	r0, [pc, #332]	; (8002100 <MX_GPIO_Init+0x21c>)
 8001fb4:	f001 fb7a 	bl	80036ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001fbe:	4851      	ldr	r0, [pc, #324]	; (8002104 <MX_GPIO_Init+0x220>)
 8001fc0:	f001 fb74 	bl	80036ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fc8:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <MX_GPIO_Init+0x224>)
 8001fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4849      	ldr	r0, [pc, #292]	; (80020fc <MX_GPIO_Init+0x218>)
 8001fd8:	f001 f9b6 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|TRIG_Pin;
 8001fdc:	2314      	movs	r3, #20
 8001fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4842      	ldr	r0, [pc, #264]	; (80020fc <MX_GPIO_Init+0x218>)
 8001ff4:	f001 f9a8 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002008:	2302      	movs	r3, #2
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	483a      	ldr	r0, [pc, #232]	; (80020fc <MX_GPIO_Init+0x218>)
 8002014:	f001 f998 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002018:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <MX_GPIO_Init+0x224>)
 8002020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	4837      	ldr	r0, [pc, #220]	; (800210c <MX_GPIO_Init+0x228>)
 800202e:	f001 f98b 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002032:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	482d      	ldr	r0, [pc, #180]	; (8002100 <MX_GPIO_Init+0x21c>)
 800204c:	f001 f97c 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002050:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	4826      	ldr	r0, [pc, #152]	; (8002104 <MX_GPIO_Init+0x220>)
 800206a:	f001 f96d 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800206e:	2310      	movs	r3, #16
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002072:	4b25      	ldr	r3, [pc, #148]	; (8002108 <MX_GPIO_Init+0x224>)
 8002074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	481f      	ldr	r0, [pc, #124]	; (8002100 <MX_GPIO_Init+0x21c>)
 8002082:	f001 f961 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002086:	2308      	movs	r3, #8
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <MX_GPIO_Init+0x224>)
 800208c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	4619      	mov	r1, r3
 8002098:	481d      	ldr	r0, [pc, #116]	; (8002110 <MX_GPIO_Init+0x22c>)
 800209a:	f001 f955 	bl	8003348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2006      	movs	r0, #6
 80020a4:	f001 f919 	bl	80032da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020a8:	2006      	movs	r0, #6
 80020aa:	f001 f932 	bl	8003312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2007      	movs	r0, #7
 80020b4:	f001 f911 	bl	80032da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020b8:	2007      	movs	r0, #7
 80020ba:	f001 f92a 	bl	8003312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2009      	movs	r0, #9
 80020c4:	f001 f909 	bl	80032da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80020c8:	2009      	movs	r0, #9
 80020ca:	f001 f922 	bl	8003312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	200a      	movs	r0, #10
 80020d4:	f001 f901 	bl	80032da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020d8:	200a      	movs	r0, #10
 80020da:	f001 f91a 	bl	8003312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2028      	movs	r0, #40	; 0x28
 80020e4:	f001 f8f9 	bl	80032da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020e8:	2028      	movs	r0, #40	; 0x28
 80020ea:	f001 f912 	bl	8003312 <HAL_NVIC_EnableIRQ>

}
 80020ee:	bf00      	nop
 80020f0:	3730      	adds	r7, #48	; 0x30
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40020800 	.word	0x40020800
 8002108:	10110000 	.word	0x10110000
 800210c:	40021000 	.word	0x40021000
 8002110:	40020400 	.word	0x40020400

08002114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002118:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800211a:	e7fe      	b.n	800211a <Error_Handler+0x6>

0800211c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <HAL_MspInit+0x4c>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_MspInit+0x4c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_MspInit+0x4c>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_MspInit+0x4c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a36      	ldr	r2, [pc, #216]	; (8002264 <HAL_ADC_MspInit+0xf8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d130      	bne.n	80021f0 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a34      	ldr	r2, [pc, #208]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b32      	ldr	r3, [pc, #200]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a2d      	ldr	r2, [pc, #180]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021c6:	2308      	movs	r3, #8
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ca:	2303      	movs	r3, #3
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	4619      	mov	r1, r3
 80021d8:	4824      	ldr	r0, [pc, #144]	; (800226c <HAL_ADC_MspInit+0x100>)
 80021da:	f001 f8b5 	bl	8003348 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2012      	movs	r0, #18
 80021e4:	f001 f879 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80021e8:	2012      	movs	r0, #18
 80021ea:	f001 f892 	bl	8003312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021ee:	e034      	b.n	800225a <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1e      	ldr	r2, [pc, #120]	; (8002270 <HAL_ADC_MspInit+0x104>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d12f      	bne.n	800225a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 8002204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_ADC_MspInit+0xfc>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002232:	2302      	movs	r3, #2
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002236:	2303      	movs	r3, #3
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4619      	mov	r1, r3
 8002244:	480b      	ldr	r0, [pc, #44]	; (8002274 <HAL_ADC_MspInit+0x108>)
 8002246:	f001 f87f 	bl	8003348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2012      	movs	r0, #18
 8002250:	f001 f843 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002254:	2012      	movs	r0, #18
 8002256:	f001 f85c 	bl	8003312 <HAL_NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3730      	adds	r7, #48	; 0x30
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40012000 	.word	0x40012000
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000
 8002270:	40012100 	.word	0x40012100
 8002274:	40020800 	.word	0x40020800

08002278 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1d      	ldr	r2, [pc, #116]	; (800230c <HAL_TIM_IC_MspInit+0x94>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d134      	bne.n	8002304 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_TIM_IC_MspInit+0x98>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <HAL_TIM_IC_MspInit+0x98>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_TIM_IC_MspInit+0x98>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_TIM_IC_MspInit+0x98>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_TIM_IC_MspInit+0x98>)
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_TIM_IC_MspInit+0x98>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80022d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	4809      	ldr	r0, [pc, #36]	; (8002314 <HAL_TIM_IC_MspInit+0x9c>)
 80022f0:	f001 f82a 	bl	8003348 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	201b      	movs	r0, #27
 80022fa:	f000 ffee 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022fe:	201b      	movs	r0, #27
 8002300:	f001 f807 	bl	8003312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40010000 	.word	0x40010000
 8002310:	40023800 	.word	0x40023800
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d10e      	bne.n	8002348 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002346:	e03a      	b.n	80023be <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <HAL_TIM_Base_MspInit+0xb8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
}
 800236e:	e026      	b.n	80023be <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_TIM_Base_MspInit+0xbc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10e      	bne.n	8002398 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 8002384:	f043 0310 	orr.w	r3, r3, #16
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	e012      	b.n	80023be <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_TIM_Base_MspInit+0xc0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10d      	bne.n	80023be <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_TIM_Base_MspInit+0xb4>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40000800 	.word	0x40000800
 80023d4:	40001000 	.word	0x40001000
 80023d8:	40014000 	.word	0x40014000

080023dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fc:	d11f      	bne.n	800243e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800241a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800241e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800242c:	2301      	movs	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4619      	mov	r1, r3
 8002436:	4829      	ldr	r0, [pc, #164]	; (80024dc <HAL_TIM_MspPostInit+0x100>)
 8002438:	f000 ff86 	bl	8003348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800243c:	e047      	b.n	80024ce <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_TIM_MspPostInit+0x104>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d11f      	bne.n	8002488 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 8002452:	f043 0308 	orr.w	r3, r3, #8
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002476:	2302      	movs	r3, #2
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4818      	ldr	r0, [pc, #96]	; (80024e4 <HAL_TIM_MspPostInit+0x108>)
 8002482:	f000 ff61 	bl	8003348 <HAL_GPIO_Init>
}
 8002486:	e022      	b.n	80024ce <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <HAL_TIM_MspPostInit+0x10c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d11d      	bne.n	80024ce <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 800249c:	f043 0310 	orr.w	r3, r3, #16
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_TIM_MspPostInit+0xfc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024ae:	2340      	movs	r3, #64	; 0x40
 80024b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80024be:	2303      	movs	r3, #3
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	4808      	ldr	r0, [pc, #32]	; (80024ec <HAL_TIM_MspPostInit+0x110>)
 80024ca:	f000 ff3d 	bl	8003348 <HAL_GPIO_Init>
}
 80024ce:	bf00      	nop
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40000800 	.word	0x40000800
 80024e4:	40020c00 	.word	0x40020c00
 80024e8:	40014000 	.word	0x40014000
 80024ec:	40021000 	.word	0x40021000

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <NMI_Handler+0x4>

080024f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler+0x4>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <MemManage_Handler+0x4>

08002502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <UsageFault_Handler+0x4>

0800250e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253c:	f000 f8d4 	bl	80026e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002548:	2001      	movs	r0, #1
 800254a:	f001 f8c9 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}

08002552 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002556:	2002      	movs	r0, #2
 8002558:	f001 f8c2 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002564:	2008      	movs	r0, #8
 8002566:	f001 f8bb 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}

0800256e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002572:	2010      	movs	r0, #16
 8002574:	f001 f8b4 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <ADC_IRQHandler+0x14>)
 8002582:	f000 fa44 	bl	8002a0e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002586:	4803      	ldr	r0, [pc, #12]	; (8002594 <ADC_IRQHandler+0x18>)
 8002588:	f000 fa41 	bl	8002a0e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000134 	.word	0x20000134
 8002594:	200000e4 	.word	0x200000e4

08002598 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <TIM1_CC_IRQHandler+0x10>)
 800259e:	f001 fe3b 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200001c0 	.word	0x200001c0

080025ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80025b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025b4:	f001 f894 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80025b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025bc:	f001 f890 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <SystemInit+0x28>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <SystemInit+0x28>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <SystemInit+0x28>)
 80025da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025de:	609a      	str	r2, [r3, #8]
#endif
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002628 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025f6:	e003      	b.n	8002600 <LoopCopyDataInit>

080025f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025fe:	3104      	adds	r1, #4

08002600 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002600:	480b      	ldr	r0, [pc, #44]	; (8002630 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002604:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002606:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002608:	d3f6      	bcc.n	80025f8 <CopyDataInit>
  ldr  r2, =_sbss
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800260c:	e002      	b.n	8002614 <LoopFillZerobss>

0800260e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800260e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002610:	f842 3b04 	str.w	r3, [r2], #4

08002614 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002616:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002618:	d3f9      	bcc.n	800260e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800261a:	f7ff ffd3 	bl	80025c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261e:	f002 fe53 	bl	80052c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002622:	f7ff f931 	bl	8001888 <main>
  bx  lr    
 8002626:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002628:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800262c:	08005358 	.word	0x08005358
  ldr  r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002634:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8002638:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 800263c:	2000028c 	.word	0x2000028c

08002640 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002640:	e7fe      	b.n	8002640 <CAN1_RX0_IRQHandler>
	...

08002644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_Init+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <HAL_Init+0x40>)
 800264e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <HAL_Init+0x40>)
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_Init+0x40>)
 8002666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266c:	2003      	movs	r0, #3
 800266e:	f000 fe29 	bl	80032c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002672:	2000      	movs	r0, #0
 8002674:	f000 f808 	bl	8002688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002678:	f7ff fd50 	bl	800211c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x54>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x58>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fe41 	bl	800332e <HAL_SYSTICK_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00e      	b.n	80026d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d80a      	bhi.n	80026d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026bc:	2200      	movs	r2, #0
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f000 fe09 	bl	80032da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c8:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <HAL_InitTick+0x5c>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000010 	.word	0x20000010
 80026e0:	20000018 	.word	0x20000018
 80026e4:	20000014 	.word	0x20000014

080026e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x20>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x24>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_IncTick+0x24>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000018 	.word	0x20000018
 800270c:	20000288 	.word	0x20000288

08002710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_GetTick+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000288 	.word	0x20000288

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff ffee 	bl	8002710 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_Delay+0x40>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffde 	bl	8002710 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000018 	.word	0x20000018

0800276c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e033      	b.n	80027ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fcee 	bl	800216c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027b2:	f023 0302 	bic.w	r3, r3, #2
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fbaa 	bl	8002f18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
 80027da:	e001      	b.n	80027e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_ADC_Start_IT+0x1a>
 800280a:	2302      	movs	r3, #2
 800280c:	e0b0      	b.n	8002970 <HAL_ADC_Start_IT+0x17c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d018      	beq.n	8002856 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002834:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_ADC_Start_IT+0x188>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a51      	ldr	r2, [pc, #324]	; (8002980 <HAL_ADC_Start_IT+0x18c>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9a      	lsrs	r2, r3, #18
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002848:	e002      	b.n	8002850 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3b01      	subs	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f9      	bne.n	800284a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 8084 	bne.w	800296e <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002890:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a4:	d106      	bne.n	80028b4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f023 0206 	bic.w	r2, r3, #6
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
 80028b2:	e002      	b.n	80028ba <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c2:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_ADC_Start_IT+0x190>)
 80028c4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028ce:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028de:	f043 0320 	orr.w	r3, r3, #32
 80028e2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d12a      	bne.n	8002946 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a24      	ldr	r2, [pc, #144]	; (8002988 <HAL_ADC_Start_IT+0x194>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d015      	beq.n	8002926 <HAL_ADC_Start_IT+0x132>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a23      	ldr	r2, [pc, #140]	; (800298c <HAL_ADC_Start_IT+0x198>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d105      	bne.n	8002910 <HAL_ADC_Start_IT+0x11c>
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_ADC_Start_IT+0x190>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_ADC_Start_IT+0x19c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d129      	bne.n	800296e <HAL_ADC_Start_IT+0x17a>
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_ADC_Start_IT+0x190>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2b0f      	cmp	r3, #15
 8002924:	d823      	bhi.n	800296e <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d11c      	bne.n	800296e <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	e013      	b.n	800296e <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <HAL_ADC_Start_IT+0x194>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10e      	bne.n	800296e <HAL_ADC_Start_IT+0x17a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800296c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	20000010 	.word	0x20000010
 8002980:	431bde83 	.word	0x431bde83
 8002984:	40012300 	.word	0x40012300
 8002988:	40012000 	.word	0x40012000
 800298c:	40012100 	.word	0x40012100
 8002990:	40012200 	.word	0x40012200

08002994 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_Stop_IT+0x16>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e02b      	b.n	8002a02 <HAL_ADC_Stop_IT+0x6e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d113      	bne.n	80029f8 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029de:	f023 0320 	bic.w	r3, r3, #32
 80029e2:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	bf0c      	ite	eq
 8002a42:	2301      	moveq	r3, #1
 8002a44:	2300      	movne	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d049      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0xd6>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d046      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d12b      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d127      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d119      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0220 	bic.w	r2, r2, #32
 8002aae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fe f935 	bl	8000d44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0212 	mvn.w	r2, #18
 8002ae2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d057      	beq.n	8002bc6 <HAL_ADC_IRQHandler+0x1b8>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d054      	beq.n	8002bc6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d139      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d12b      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d124      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11d      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d119      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b90:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 faaa 	bl	8003110 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 020c 	mvn.w	r2, #12
 8002bc4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d017      	beq.n	8002c28 <HAL_ADC_IRQHandler+0x21a>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d014      	beq.n	8002c28 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10d      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f846 	bl	8002caa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0201 	mvn.w	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4c:	bf0c      	ite	eq
 8002c4e:	2301      	moveq	r3, #1
 8002c50:	2300      	movne	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_ADC_IRQHandler+0x27a>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d012      	beq.n	8002c88 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0202 	orr.w	r2, r3, #2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0220 	mvn.w	r2, #32
 8002c76:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f820 	bl	8002cbe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f06f 0220 	mvn.w	r2, #32
 8002c86:	601a      	str	r2, [r3, #0]
  }
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1c>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e105      	b.n	8002efc <HAL_ADC_ConfigChannel+0x228>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b09      	cmp	r3, #9
 8002cfe:	d925      	bls.n	8002d4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68d9      	ldr	r1, [r3, #12]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	3b1e      	subs	r3, #30
 8002d16:	2207      	movs	r2, #7
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	400a      	ands	r2, r1
 8002d24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68d9      	ldr	r1, [r3, #12]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	4618      	mov	r0, r3
 8002d38:	4603      	mov	r3, r0
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4403      	add	r3, r0
 8002d3e:	3b1e      	subs	r3, #30
 8002d40:	409a      	lsls	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	e022      	b.n	8002d92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6919      	ldr	r1, [r3, #16]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	2207      	movs	r2, #7
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6919      	ldr	r1, [r3, #16]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4618      	mov	r0, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4403      	add	r3, r0
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d824      	bhi.n	8002de4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	3b05      	subs	r3, #5
 8002dac:	221f      	movs	r2, #31
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3b05      	subs	r3, #5
 8002dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34
 8002de2:	e04c      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d824      	bhi.n	8002e36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3b23      	subs	r3, #35	; 0x23
 8002dfe:	221f      	movs	r2, #31
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43da      	mvns	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	3b23      	subs	r3, #35	; 0x23
 8002e28:	fa00 f203 	lsl.w	r2, r0, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
 8002e34:	e023      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	3b41      	subs	r3, #65	; 0x41
 8002e48:	221f      	movs	r2, #31
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	400a      	ands	r2, r1
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4618      	mov	r0, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	3b41      	subs	r3, #65	; 0x41
 8002e72:	fa00 f203 	lsl.w	r2, r0, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <HAL_ADC_ConfigChannel+0x234>)
 8002e80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <HAL_ADC_ConfigChannel+0x238>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1cc>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b12      	cmp	r3, #18
 8002e92:	d105      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <HAL_ADC_ConfigChannel+0x238>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d123      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x21e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d003      	beq.n	8002eba <HAL_ADC_ConfigChannel+0x1e6>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b11      	cmp	r3, #17
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d111      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <HAL_ADC_ConfigChannel+0x23c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_ADC_ConfigChannel+0x240>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	0c9a      	lsrs	r2, r3, #18
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee4:	e002      	b.n	8002eec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f9      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40012300 	.word	0x40012300
 8002f0c:	40012000 	.word	0x40012000
 8002f10:	20000010 	.word	0x20000010
 8002f14:	431bde83 	.word	0x431bde83

08002f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f20:	4b79      	ldr	r3, [pc, #484]	; (8003108 <ADC_Init+0x1f0>)
 8002f22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	021a      	lsls	r2, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	4a58      	ldr	r2, [pc, #352]	; (800310c <ADC_Init+0x1f4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6899      	ldr	r1, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	e00f      	b.n	8003016 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003014:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0202 	bic.w	r2, r2, #2
 8003024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7e1b      	ldrb	r3, [r3, #24]
 8003030:	005a      	lsls	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003052:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	3b01      	subs	r3, #1
 8003070:	035a      	lsls	r2, r3, #13
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	e007      	b.n	800308c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	051a      	lsls	r2, r3, #20
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ce:	025a      	lsls	r2, r3, #9
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	029a      	lsls	r2, r3, #10
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40012300 	.word	0x40012300
 800310c:	0f000001 	.word	0x0f000001

08003110 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003140:	4013      	ands	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800314c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003156:	4a04      	ldr	r2, [pc, #16]	; (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	60d3      	str	r3, [r2, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <__NVIC_GetPriorityGrouping+0x18>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	f003 0307 	and.w	r3, r3, #7
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	2b00      	cmp	r3, #0
 8003198:	db0b      	blt.n	80031b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4907      	ldr	r1, [pc, #28]	; (80031c0 <__NVIC_EnableIRQ+0x38>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2001      	movs	r0, #1
 80031aa:	fa00 f202 	lsl.w	r2, r0, r2
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000e100 	.word	0xe000e100

080031c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db0a      	blt.n	80031ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	490c      	ldr	r1, [pc, #48]	; (8003210 <__NVIC_SetPriority+0x4c>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	440b      	add	r3, r1
 80031e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ec:	e00a      	b.n	8003204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4908      	ldr	r1, [pc, #32]	; (8003214 <__NVIC_SetPriority+0x50>)
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	3b04      	subs	r3, #4
 80031fc:	0112      	lsls	r2, r2, #4
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	440b      	add	r3, r1
 8003202:	761a      	strb	r2, [r3, #24]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000e100 	.word	0xe000e100
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f1c3 0307 	rsb	r3, r3, #7
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf28      	it	cs
 8003236:	2304      	movcs	r3, #4
 8003238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3304      	adds	r3, #4
 800323e:	2b06      	cmp	r3, #6
 8003240:	d902      	bls.n	8003248 <NVIC_EncodePriority+0x30>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3b03      	subs	r3, #3
 8003246:	e000      	b.n	800324a <NVIC_EncodePriority+0x32>
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	401a      	ands	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003260:	f04f 31ff 	mov.w	r1, #4294967295
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	43d9      	mvns	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	4313      	orrs	r3, r2
         );
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	; 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003290:	d301      	bcc.n	8003296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003292:	2301      	movs	r3, #1
 8003294:	e00f      	b.n	80032b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <SysTick_Config+0x40>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800329e:	210f      	movs	r1, #15
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	f7ff ff8e 	bl	80031c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <SysTick_Config+0x40>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <SysTick_Config+0x40>)
 80032b0:	2207      	movs	r2, #7
 80032b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	e000e010 	.word	0xe000e010

080032c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff29 	bl	8003124 <__NVIC_SetPriorityGrouping>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ec:	f7ff ff3e 	bl	800316c <__NVIC_GetPriorityGrouping>
 80032f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff ff8e 	bl	8003218 <NVIC_EncodePriority>
 80032fc:	4602      	mov	r2, r0
 80032fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff5d 	bl	80031c4 <__NVIC_SetPriority>
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff31 	bl	8003188 <__NVIC_EnableIRQ>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ffa2 	bl	8003280 <SysTick_Config>
 800333c:	4603      	mov	r3, r0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	; 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	e16b      	b.n	800363c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003364:	2201      	movs	r2, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	429a      	cmp	r2, r3
 800337e:	f040 815a 	bne.w	8003636 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d00b      	beq.n	80033a2 <HAL_GPIO_Init+0x5a>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d007      	beq.n	80033a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003396:	2b11      	cmp	r3, #17
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b12      	cmp	r3, #18
 80033a0:	d130      	bne.n	8003404 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	2203      	movs	r2, #3
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d8:	2201      	movs	r2, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 0201 	and.w	r2, r3, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0xfc>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b12      	cmp	r3, #18
 8003442:	d123      	bne.n	800348c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	08da      	lsrs	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3208      	adds	r2, #8
 800344c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	08da      	lsrs	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3208      	adds	r2, #8
 8003486:	69b9      	ldr	r1, [r7, #24]
 8003488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0203 	and.w	r2, r3, #3
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80b4 	beq.w	8003636 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b5f      	ldr	r3, [pc, #380]	; (8003650 <HAL_GPIO_Init+0x308>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4a5e      	ldr	r2, [pc, #376]	; (8003650 <HAL_GPIO_Init+0x308>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034dc:	6453      	str	r3, [r2, #68]	; 0x44
 80034de:	4b5c      	ldr	r3, [pc, #368]	; (8003650 <HAL_GPIO_Init+0x308>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ea:	4a5a      	ldr	r2, [pc, #360]	; (8003654 <HAL_GPIO_Init+0x30c>)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a51      	ldr	r2, [pc, #324]	; (8003658 <HAL_GPIO_Init+0x310>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d02b      	beq.n	800356e <HAL_GPIO_Init+0x226>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a50      	ldr	r2, [pc, #320]	; (800365c <HAL_GPIO_Init+0x314>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d025      	beq.n	800356a <HAL_GPIO_Init+0x222>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4f      	ldr	r2, [pc, #316]	; (8003660 <HAL_GPIO_Init+0x318>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01f      	beq.n	8003566 <HAL_GPIO_Init+0x21e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a4e      	ldr	r2, [pc, #312]	; (8003664 <HAL_GPIO_Init+0x31c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d019      	beq.n	8003562 <HAL_GPIO_Init+0x21a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4d      	ldr	r2, [pc, #308]	; (8003668 <HAL_GPIO_Init+0x320>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_GPIO_Init+0x216>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4c      	ldr	r2, [pc, #304]	; (800366c <HAL_GPIO_Init+0x324>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00d      	beq.n	800355a <HAL_GPIO_Init+0x212>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4b      	ldr	r2, [pc, #300]	; (8003670 <HAL_GPIO_Init+0x328>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <HAL_GPIO_Init+0x20e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4a      	ldr	r2, [pc, #296]	; (8003674 <HAL_GPIO_Init+0x32c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_GPIO_Init+0x20a>
 800354e:	2307      	movs	r3, #7
 8003550:	e00e      	b.n	8003570 <HAL_GPIO_Init+0x228>
 8003552:	2308      	movs	r3, #8
 8003554:	e00c      	b.n	8003570 <HAL_GPIO_Init+0x228>
 8003556:	2306      	movs	r3, #6
 8003558:	e00a      	b.n	8003570 <HAL_GPIO_Init+0x228>
 800355a:	2305      	movs	r3, #5
 800355c:	e008      	b.n	8003570 <HAL_GPIO_Init+0x228>
 800355e:	2304      	movs	r3, #4
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x228>
 8003562:	2303      	movs	r3, #3
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x228>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x228>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x228>
 800356e:	2300      	movs	r3, #0
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003580:	4934      	ldr	r1, [pc, #208]	; (8003654 <HAL_GPIO_Init+0x30c>)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358e:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <HAL_GPIO_Init+0x330>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b2:	4a31      	ldr	r2, [pc, #196]	; (8003678 <HAL_GPIO_Init+0x330>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035b8:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <HAL_GPIO_Init+0x330>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <HAL_GPIO_Init+0x330>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_GPIO_Init+0x330>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <HAL_GPIO_Init+0x330>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_GPIO_Init+0x330>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <HAL_GPIO_Init+0x330>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	f67f ae90 	bls.w	8003364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003644:	bf00      	nop
 8003646:	3724      	adds	r7, #36	; 0x24
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40023800 	.word	0x40023800
 8003654:	40013800 	.word	0x40013800
 8003658:	40020000 	.word	0x40020000
 800365c:	40020400 	.word	0x40020400
 8003660:	40020800 	.word	0x40020800
 8003664:	40020c00 	.word	0x40020c00
 8003668:	40021000 	.word	0x40021000
 800366c:	40021400 	.word	0x40021400
 8003670:	40021800 	.word	0x40021800
 8003674:	40021c00 	.word	0x40021c00
 8003678:	40013c00 	.word	0x40013c00

0800367c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e001      	b.n	800369e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
 80036b8:	4613      	mov	r3, r2
 80036ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036bc:	787b      	ldrb	r3, [r7, #1]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c2:	887a      	ldrh	r2, [r7, #2]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c8:	e003      	b.n	80036d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	041a      	lsls	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	619a      	str	r2, [r3, #24]
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d006      	beq.n	8003704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036f6:	4a05      	ldr	r2, [pc, #20]	; (800370c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fb6c 	bl	8000ddc <HAL_GPIO_EXTI_Callback>
  }
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40013c00 	.word	0x40013c00

08003710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e25b      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d075      	beq.n	800381a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372e:	4ba3      	ldr	r3, [pc, #652]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b04      	cmp	r3, #4
 8003738:	d00c      	beq.n	8003754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373a:	4ba0      	ldr	r3, [pc, #640]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003742:	2b08      	cmp	r3, #8
 8003744:	d112      	bne.n	800376c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003746:	4b9d      	ldr	r3, [pc, #628]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003752:	d10b      	bne.n	800376c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	4b99      	ldr	r3, [pc, #612]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d05b      	beq.n	8003818 <HAL_RCC_OscConfig+0x108>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d157      	bne.n	8003818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e236      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d106      	bne.n	8003784 <HAL_RCC_OscConfig+0x74>
 8003776:	4b91      	ldr	r3, [pc, #580]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a90      	ldr	r2, [pc, #576]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e01d      	b.n	80037c0 <HAL_RCC_OscConfig+0xb0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x98>
 800378e:	4b8b      	ldr	r3, [pc, #556]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a8a      	ldr	r2, [pc, #552]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b88      	ldr	r3, [pc, #544]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a87      	ldr	r2, [pc, #540]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0xb0>
 80037a8:	4b84      	ldr	r3, [pc, #528]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a83      	ldr	r2, [pc, #524]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b81      	ldr	r3, [pc, #516]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe ffa2 	bl	8002710 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe ff9e 	bl	8002710 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1fb      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b76      	ldr	r3, [pc, #472]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0xc0>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe ff8e 	bl	8002710 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fe ff8a 	bl	8002710 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1e7      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	4b6c      	ldr	r3, [pc, #432]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0xe8>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d063      	beq.n	80038ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003826:	4b65      	ldr	r3, [pc, #404]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b62      	ldr	r3, [pc, #392]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800383a:	2b08      	cmp	r3, #8
 800383c:	d11c      	bne.n	8003878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383e:	4b5f      	ldr	r3, [pc, #380]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	4b5c      	ldr	r3, [pc, #368]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x152>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1bb      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b56      	ldr	r3, [pc, #344]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4952      	ldr	r1, [pc, #328]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	e03a      	b.n	80038ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003880:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <HAL_RCC_OscConfig+0x2b0>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fe ff43 	bl	8002710 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388e:	f7fe ff3f 	bl	8002710 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e19c      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	4b46      	ldr	r3, [pc, #280]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b43      	ldr	r3, [pc, #268]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4940      	ldr	r1, [pc, #256]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
 80038c0:	e015      	b.n	80038ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c2:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_OscConfig+0x2b0>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe ff22 	bl	8002710 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d0:	f7fe ff1e 	bl	8002710 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e17b      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d030      	beq.n	800395c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003902:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <HAL_RCC_OscConfig+0x2b4>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fe ff02 	bl	8002710 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe fefe 	bl	8002710 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e15b      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x200>
 800392e:	e015      	b.n	800395c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003930:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCC_OscConfig+0x2b4>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003936:	f7fe feeb 	bl	8002710 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393e:	f7fe fee7 	bl	8002710 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e144      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a0 	beq.w	8003aaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_RCC_OscConfig+0x2ac>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_OscConfig+0x2b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d121      	bne.n	80039ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_RCC_OscConfig+0x2b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <HAL_RCC_OscConfig+0x2b8>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b2:	f7fe fead 	bl	8002710 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e011      	b.n	80039de <HAL_RCC_OscConfig+0x2ce>
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	42470000 	.word	0x42470000
 80039c4:	42470e80 	.word	0x42470e80
 80039c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039cc:	f7fe fea0 	bl	8002710 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0fd      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039de:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCC_OscConfig+0x4d4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d106      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
 80039f2:	4b7d      	ldr	r3, [pc, #500]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4a7c      	ldr	r2, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70
 80039fe:	e01c      	b.n	8003a3a <HAL_RCC_OscConfig+0x32a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	d10c      	bne.n	8003a22 <HAL_RCC_OscConfig+0x312>
 8003a08:	4b77      	ldr	r3, [pc, #476]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	4a76      	ldr	r2, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6713      	str	r3, [r2, #112]	; 0x70
 8003a14:	4b74      	ldr	r3, [pc, #464]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a73      	ldr	r2, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	e00b      	b.n	8003a3a <HAL_RCC_OscConfig+0x32a>
 8003a22:	4b71      	ldr	r3, [pc, #452]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	4a70      	ldr	r2, [pc, #448]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2e:	4b6e      	ldr	r3, [pc, #440]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a6d      	ldr	r2, [pc, #436]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d015      	beq.n	8003a6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a42:	f7fe fe65 	bl	8002710 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fe fe61 	bl	8002710 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0bc      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ee      	beq.n	8003a4a <HAL_RCC_OscConfig+0x33a>
 8003a6c:	e014      	b.n	8003a98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fe fe4f 	bl	8002710 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fe fe4b 	bl	8002710 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e0a6      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ee      	bne.n	8003a76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9e:	4b52      	ldr	r3, [pc, #328]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a51      	ldr	r2, [pc, #324]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8092 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d05c      	beq.n	8003b7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d141      	bne.n	8003b4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac8:	4b48      	ldr	r3, [pc, #288]	; (8003bec <HAL_RCC_OscConfig+0x4dc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fe1f 	bl	8002710 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fe fe1b 	bl	8002710 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e078      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae8:	4b3f      	ldr	r3, [pc, #252]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	019b      	lsls	r3, r3, #6
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	061b      	lsls	r3, r3, #24
 8003b18:	4933      	ldr	r1, [pc, #204]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b1e:	4b33      	ldr	r3, [pc, #204]	; (8003bec <HAL_RCC_OscConfig+0x4dc>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fe fdf4 	bl	8002710 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe fdf0 	bl	8002710 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e04d      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x41c>
 8003b4a:	e045      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <HAL_RCC_OscConfig+0x4dc>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fe fddd 	bl	8002710 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fe fdd9 	bl	8002710 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e036      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x44a>
 8003b78:	e02e      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e029      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_RCC_OscConfig+0x4d8>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d11c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d115      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bae:	4013      	ands	r3, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40007000 	.word	0x40007000
 8003be8:	40023800 	.word	0x40023800
 8003bec:	42470060 	.word	0x42470060

08003bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0cc      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c04:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d90c      	bls.n	8003c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b65      	ldr	r3, [pc, #404]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0b8      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a58      	ldr	r2, [pc, #352]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c5c:	4b53      	ldr	r3, [pc, #332]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a52      	ldr	r2, [pc, #328]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c68:	4b50      	ldr	r3, [pc, #320]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	494d      	ldr	r1, [pc, #308]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d044      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d119      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cae:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e06f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e067      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4934      	ldr	r1, [pc, #208]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce0:	f7fe fd16 	bl	8002710 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fe fd12 	bl	8002710 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 020c 	and.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1eb      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d20c      	bcs.n	8003d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e032      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4916      	ldr	r1, [pc, #88]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d62:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	490e      	ldr	r1, [pc, #56]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d76:	f000 f821 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d7a:	4601      	mov	r1, r0
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d88:	5cd3      	ldrb	r3, [r2, r3]
 8003d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fc76 	bl	8002688 <HAL_InitTick>

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023c00 	.word	0x40023c00
 8003dac:	40023800 	.word	0x40023800
 8003db0:	08005338 	.word	0x08005338
 8003db4:	20000010 	.word	0x20000010
 8003db8:	20000014 	.word	0x20000014

08003dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd2:	4b63      	ldr	r3, [pc, #396]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d007      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0x32>
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d008      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x38>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 80b4 	bne.w	8003f50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003de8:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003dea:	60bb      	str	r3, [r7, #8]
       break;
 8003dec:	e0b3      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dee:	4b5e      	ldr	r3, [pc, #376]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003df0:	60bb      	str	r3, [r7, #8]
      break;
 8003df2:	e0b0      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df4:	4b5a      	ldr	r3, [pc, #360]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dfe:	4b58      	ldr	r3, [pc, #352]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d04a      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0a:	4b55      	ldr	r3, [pc, #340]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	f04f 0400 	mov.w	r4, #0
 8003e14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	ea03 0501 	and.w	r5, r3, r1
 8003e20:	ea04 0602 	and.w	r6, r4, r2
 8003e24:	4629      	mov	r1, r5
 8003e26:	4632      	mov	r2, r6
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	f04f 0400 	mov.w	r4, #0
 8003e30:	0154      	lsls	r4, r2, #5
 8003e32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e36:	014b      	lsls	r3, r1, #5
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4622      	mov	r2, r4
 8003e3c:	1b49      	subs	r1, r1, r5
 8003e3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	f04f 0400 	mov.w	r4, #0
 8003e4a:	0194      	lsls	r4, r2, #6
 8003e4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e50:	018b      	lsls	r3, r1, #6
 8003e52:	1a5b      	subs	r3, r3, r1
 8003e54:	eb64 0402 	sbc.w	r4, r4, r2
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	00e2      	lsls	r2, r4, #3
 8003e62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e66:	00d9      	lsls	r1, r3, #3
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	195b      	adds	r3, r3, r5
 8003e6e:	eb44 0406 	adc.w	r4, r4, r6
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	0262      	lsls	r2, r4, #9
 8003e7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e80:	0259      	lsls	r1, r3, #9
 8003e82:	460b      	mov	r3, r1
 8003e84:	4614      	mov	r4, r2
 8003e86:	4618      	mov	r0, r3
 8003e88:	4621      	mov	r1, r4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f04f 0400 	mov.w	r4, #0
 8003e90:	461a      	mov	r2, r3
 8003e92:	4623      	mov	r3, r4
 8003e94:	f7fc fdd6 	bl	8000a44 <__aeabi_uldivmod>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e049      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea0:	4b2f      	ldr	r3, [pc, #188]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	f04f 0400 	mov.w	r4, #0
 8003eaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	ea03 0501 	and.w	r5, r3, r1
 8003eb6:	ea04 0602 	and.w	r6, r4, r2
 8003eba:	4629      	mov	r1, r5
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	f04f 0400 	mov.w	r4, #0
 8003ec6:	0154      	lsls	r4, r2, #5
 8003ec8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ecc:	014b      	lsls	r3, r1, #5
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	1b49      	subs	r1, r1, r5
 8003ed4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	f04f 0400 	mov.w	r4, #0
 8003ee0:	0194      	lsls	r4, r2, #6
 8003ee2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ee6:	018b      	lsls	r3, r1, #6
 8003ee8:	1a5b      	subs	r3, r3, r1
 8003eea:	eb64 0402 	sbc.w	r4, r4, r2
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	00e2      	lsls	r2, r4, #3
 8003ef8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003efc:	00d9      	lsls	r1, r3, #3
 8003efe:	460b      	mov	r3, r1
 8003f00:	4614      	mov	r4, r2
 8003f02:	195b      	adds	r3, r3, r5
 8003f04:	eb44 0406 	adc.w	r4, r4, r6
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	02a2      	lsls	r2, r4, #10
 8003f12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f16:	0299      	lsls	r1, r3, #10
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4614      	mov	r4, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4621      	mov	r1, r4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f04f 0400 	mov.w	r4, #0
 8003f26:	461a      	mov	r2, r3
 8003f28:	4623      	mov	r3, r4
 8003f2a:	f7fc fd8b 	bl	8000a44 <__aeabi_uldivmod>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	460c      	mov	r4, r1
 8003f32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	60bb      	str	r3, [r7, #8]
      break;
 8003f4e:	e002      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f52:	60bb      	str	r3, [r7, #8]
      break;
 8003f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f56:	68bb      	ldr	r3, [r7, #8]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	00f42400 	.word	0x00f42400
 8003f68:	007a1200 	.word	0x007a1200

08003f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e01d      	b.n	8003fba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fe f9c0 	bl	8002318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fcc2 	bl	8004934 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d007      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e01d      	b.n	8004058 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f815 	bl	8004060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3304      	adds	r3, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f000 fc73 	bl	8004934 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f868 	bl	800515c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_TIM_PWM_Start+0x74>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_TIM_PWM_Start+0x2c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a14      	ldr	r2, [pc, #80]	; (80040ec <HAL_TIM_PWM_Start+0x78>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_PWM_Start+0x30>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_TIM_PWM_Start+0x32>
 80040a4:	2300      	movs	r3, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d007      	beq.n	80040dc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40010400 	.word	0x40010400

080040f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e01d      	b.n	800413e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fe f8ae 	bl	8002278 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 fc00 	bl	8004934 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d841      	bhi.n	80041dc <HAL_TIM_IC_Start_IT+0x94>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <HAL_TIM_IC_Start_IT+0x18>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004195 	.word	0x08004195
 8004164:	080041dd 	.word	0x080041dd
 8004168:	080041dd 	.word	0x080041dd
 800416c:	080041dd 	.word	0x080041dd
 8004170:	080041a7 	.word	0x080041a7
 8004174:	080041dd 	.word	0x080041dd
 8004178:	080041dd 	.word	0x080041dd
 800417c:	080041dd 	.word	0x080041dd
 8004180:	080041b9 	.word	0x080041b9
 8004184:	080041dd 	.word	0x080041dd
 8004188:	080041dd 	.word	0x080041dd
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080041cb 	.word	0x080041cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0202 	orr.w	r2, r2, #2
 80041a2:	60da      	str	r2, [r3, #12]
      break;
 80041a4:	e01b      	b.n	80041de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0204 	orr.w	r2, r2, #4
 80041b4:	60da      	str	r2, [r3, #12]
      break;
 80041b6:	e012      	b.n	80041de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0208 	orr.w	r2, r2, #8
 80041c6:	60da      	str	r2, [r3, #12]
      break;
 80041c8:	e009      	b.n	80041de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0210 	orr.w	r2, r2, #16
 80041d8:	60da      	str	r2, [r3, #12]
      break;
 80041da:	e000      	b.n	80041de <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80041dc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2201      	movs	r2, #1
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 ffb8 	bl	800515c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d007      	beq.n	800420e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fd f8ec 	bl	8001438 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fb48 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb4f 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0204 	mvn.w	r2, #4
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd f8c2 	bl	8001438 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fb1e 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb25 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0208 	mvn.w	r2, #8
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd f898 	bl	8001438 <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 faf4 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fafb 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b10      	cmp	r3, #16
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b10      	cmp	r3, #16
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0210 	mvn.w	r2, #16
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2208      	movs	r2, #8
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd f86e 	bl	8001438 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 faca 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fad1 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10e      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
 8004394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 faa4 	bl	80048e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 ff76 	bl	80052b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa96 	bl	8004920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0220 	mvn.w	r2, #32
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 ff40 	bl	80052a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_TIM_IC_ConfigChannel+0x1a>
 800443e:	2302      	movs	r3, #2
 8004440:	e08a      	b.n	8004558 <HAL_TIM_IC_ConfigChannel+0x130>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11b      	bne.n	8004490 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f000 fcb4 	bl	8004dd4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 020c 	bic.w	r2, r2, #12
 800447a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6999      	ldr	r1, [r3, #24]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	619a      	str	r2, [r3, #24]
 800448e:	e05a      	b.n	8004546 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b04      	cmp	r3, #4
 8004494:	d11c      	bne.n	80044d0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f000 fd38 	bl	8004f1a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6999      	ldr	r1, [r3, #24]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	021a      	lsls	r2, r3, #8
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	619a      	str	r2, [r3, #24]
 80044ce:	e03a      	b.n	8004546 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11b      	bne.n	800450e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6819      	ldr	r1, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f000 fd85 	bl	8004ff4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 020c 	bic.w	r2, r2, #12
 80044f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69d9      	ldr	r1, [r3, #28]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	61da      	str	r2, [r3, #28]
 800450c:	e01b      	b.n	8004546 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6819      	ldr	r1, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f000 fda5 	bl	800506c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004530:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69d9      	ldr	r1, [r3, #28]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	021a      	lsls	r2, r3, #8
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004576:	2302      	movs	r3, #2
 8004578:	e0b4      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	f200 809f 	bhi.w	80046d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004592:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045cd 	.word	0x080045cd
 800459c:	080046d1 	.word	0x080046d1
 80045a0:	080046d1 	.word	0x080046d1
 80045a4:	080046d1 	.word	0x080046d1
 80045a8:	0800460d 	.word	0x0800460d
 80045ac:	080046d1 	.word	0x080046d1
 80045b0:	080046d1 	.word	0x080046d1
 80045b4:	080046d1 	.word	0x080046d1
 80045b8:	0800464f 	.word	0x0800464f
 80045bc:	080046d1 	.word	0x080046d1
 80045c0:	080046d1 	.word	0x080046d1
 80045c4:	080046d1 	.word	0x080046d1
 80045c8:	0800468f 	.word	0x0800468f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fa4e 	bl	8004a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	619a      	str	r2, [r3, #24]
      break;
 800460a:	e062      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fa9e 	bl	8004b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6999      	ldr	r1, [r3, #24]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	619a      	str	r2, [r3, #24]
      break;
 800464c:	e041      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 faf3 	bl	8004c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0208 	orr.w	r2, r2, #8
 8004668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0204 	bic.w	r2, r2, #4
 8004678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69d9      	ldr	r1, [r3, #28]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	61da      	str	r2, [r3, #28]
      break;
 800468c:	e021      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fb47 	bl	8004d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69d9      	ldr	r1, [r3, #28]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	021a      	lsls	r2, r3, #8
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	61da      	str	r2, [r3, #28]
      break;
 80046ce:	e000      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80046d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_TIM_ConfigClockSource+0x18>
 8004700:	2302      	movs	r3, #2
 8004702:	e0a6      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x166>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800472a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d067      	beq.n	800480c <HAL_TIM_ConfigClockSource+0x120>
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d80b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x6c>
 8004740:	2b10      	cmp	r3, #16
 8004742:	d073      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x140>
 8004744:	2b10      	cmp	r3, #16
 8004746:	d802      	bhi.n	800474e <HAL_TIM_ConfigClockSource+0x62>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d06f      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800474c:	e078      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800474e:	2b20      	cmp	r3, #32
 8004750:	d06c      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x140>
 8004752:	2b30      	cmp	r3, #48	; 0x30
 8004754:	d06a      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004756:	e073      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004758:	2b70      	cmp	r3, #112	; 0x70
 800475a:	d00d      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0x8c>
 800475c:	2b70      	cmp	r3, #112	; 0x70
 800475e:	d804      	bhi.n	800476a <HAL_TIM_ConfigClockSource+0x7e>
 8004760:	2b50      	cmp	r3, #80	; 0x50
 8004762:	d033      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0xe0>
 8004764:	2b60      	cmp	r3, #96	; 0x60
 8004766:	d041      	beq.n	80047ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004768:	e06a      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d066      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x152>
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004774:	d017      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004776:	e063      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f000 fcc8 	bl	800511c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800479a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
      break;
 80047a4:	e04c      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f000 fcb1 	bl	800511c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c8:	609a      	str	r2, [r3, #8]
      break;
 80047ca:	e039      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	461a      	mov	r2, r3
 80047da:	f000 fb6f 	bl	8004ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2150      	movs	r1, #80	; 0x50
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fc7e 	bl	80050e6 <TIM_ITRx_SetConfig>
      break;
 80047ea:	e029      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	461a      	mov	r2, r3
 80047fa:	f000 fbcb 	bl	8004f94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2160      	movs	r1, #96	; 0x60
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fc6e 	bl	80050e6 <TIM_ITRx_SetConfig>
      break;
 800480a:	e019      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	461a      	mov	r2, r3
 800481a:	f000 fb4f 	bl	8004ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2140      	movs	r1, #64	; 0x40
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fc5e 	bl	80050e6 <TIM_ITRx_SetConfig>
      break;
 800482a:	e009      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f000 fc55 	bl	80050e6 <TIM_ITRx_SetConfig>
      break;
 800483c:	e000      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800483e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b0c      	cmp	r3, #12
 800486e:	d831      	bhi.n	80048d4 <HAL_TIM_ReadCapturedValue+0x78>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	080048ad 	.word	0x080048ad
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048d5 	.word	0x080048d5
 8004884:	080048d5 	.word	0x080048d5
 8004888:	080048b7 	.word	0x080048b7
 800488c:	080048d5 	.word	0x080048d5
 8004890:	080048d5 	.word	0x080048d5
 8004894:	080048d5 	.word	0x080048d5
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	080048cb 	.word	0x080048cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	60fb      	str	r3, [r7, #12]

      break;
 80048b4:	e00f      	b.n	80048d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	60fb      	str	r3, [r7, #12]

      break;
 80048be:	e00a      	b.n	80048d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	60fb      	str	r3, [r7, #12]

      break;
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	60fb      	str	r3, [r7, #12]

      break;
 80048d2:	e000      	b.n	80048d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80048d4:	bf00      	nop
  }

  return tmpreg;
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a40      	ldr	r2, [pc, #256]	; (8004a48 <TIM_Base_SetConfig+0x114>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004952:	d00f      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3d      	ldr	r2, [pc, #244]	; (8004a4c <TIM_Base_SetConfig+0x118>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00b      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3c      	ldr	r2, [pc, #240]	; (8004a50 <TIM_Base_SetConfig+0x11c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <TIM_Base_SetConfig+0x120>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a3a      	ldr	r2, [pc, #232]	; (8004a58 <TIM_Base_SetConfig+0x124>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d108      	bne.n	8004986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <TIM_Base_SetConfig+0x114>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02b      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d027      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2c      	ldr	r2, [pc, #176]	; (8004a4c <TIM_Base_SetConfig+0x118>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d023      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2b      	ldr	r2, [pc, #172]	; (8004a50 <TIM_Base_SetConfig+0x11c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01f      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <TIM_Base_SetConfig+0x120>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01b      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <TIM_Base_SetConfig+0x124>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d017      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <TIM_Base_SetConfig+0x128>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <TIM_Base_SetConfig+0x12c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00f      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <TIM_Base_SetConfig+0x130>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <TIM_Base_SetConfig+0x134>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d007      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <TIM_Base_SetConfig+0x138>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <TIM_Base_SetConfig+0x13c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d108      	bne.n	80049f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <TIM_Base_SetConfig+0x114>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_Base_SetConfig+0xf8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <TIM_Base_SetConfig+0x124>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d103      	bne.n	8004a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	615a      	str	r2, [r3, #20]
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800
 8004a68:	40001800 	.word	0x40001800
 8004a6c:	40001c00 	.word	0x40001c00
 8004a70:	40002000 	.word	0x40002000

08004a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f023 0201 	bic.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0303 	bic.w	r3, r3, #3
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f023 0302 	bic.w	r3, r3, #2
 8004abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a20      	ldr	r2, [pc, #128]	; (8004b4c <TIM_OC1_SetConfig+0xd8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC1_SetConfig+0x64>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a1f      	ldr	r2, [pc, #124]	; (8004b50 <TIM_OC1_SetConfig+0xdc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10c      	bne.n	8004af2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0308 	bic.w	r3, r3, #8
 8004ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <TIM_OC1_SetConfig+0xd8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC1_SetConfig+0x8e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <TIM_OC1_SetConfig+0xdc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d111      	bne.n	8004b26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	621a      	str	r2, [r3, #32]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40010400 	.word	0x40010400

08004b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0320 	bic.w	r3, r3, #32
 8004b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <TIM_OC2_SetConfig+0xe4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC2_SetConfig+0x68>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <TIM_OC2_SetConfig+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10d      	bne.n	8004bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <TIM_OC2_SetConfig+0xe4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_OC2_SetConfig+0x94>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <TIM_OC2_SetConfig+0xe8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d113      	bne.n	8004c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40010400 	.word	0x40010400

08004c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a21      	ldr	r2, [pc, #132]	; (8004d20 <TIM_OC3_SetConfig+0xe0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d003      	beq.n	8004ca6 <TIM_OC3_SetConfig+0x66>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <TIM_OC3_SetConfig+0xe4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d10d      	bne.n	8004cc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <TIM_OC3_SetConfig+0xe0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_OC3_SetConfig+0x92>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <TIM_OC3_SetConfig+0xe4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d113      	bne.n	8004cfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	621a      	str	r2, [r3, #32]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40010400 	.word	0x40010400

08004d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	031b      	lsls	r3, r3, #12
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <TIM_OC4_SetConfig+0xa4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC4_SetConfig+0x68>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <TIM_OC4_SetConfig+0xa8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	f023 0201 	bic.w	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a28      	ldr	r2, [pc, #160]	; (8004ea0 <TIM_TI1_SetConfig+0xcc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01b      	beq.n	8004e3a <TIM_TI1_SetConfig+0x66>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d017      	beq.n	8004e3a <TIM_TI1_SetConfig+0x66>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <TIM_TI1_SetConfig+0xd0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <TIM_TI1_SetConfig+0x66>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <TIM_TI1_SetConfig+0xd4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00f      	beq.n	8004e3a <TIM_TI1_SetConfig+0x66>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4a23      	ldr	r2, [pc, #140]	; (8004eac <TIM_TI1_SetConfig+0xd8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_TI1_SetConfig+0x66>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <TIM_TI1_SetConfig+0xdc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_TI1_SetConfig+0x66>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <TIM_TI1_SetConfig+0xe0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_TI1_SetConfig+0x66>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <TIM_TI1_SetConfig+0xe4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <TIM_TI1_SetConfig+0x6a>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <TIM_TI1_SetConfig+0x6c>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e003      	b.n	8004e5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f023 030a 	bic.w	r3, r3, #10
 8004e78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f003 030a 	and.w	r3, r3, #10
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	40000c00 	.word	0x40000c00
 8004eb0:	40010400 	.word	0x40010400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40001800 	.word	0x40001800

08004ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 030a 	bic.w	r3, r3, #10
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f023 0210 	bic.w	r2, r3, #16
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	031b      	lsls	r3, r3, #12
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f023 0210 	bic.w	r2, r3, #16
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	031b      	lsls	r3, r3, #12
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f023 0303 	bic.w	r3, r3, #3
 8005020:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005030:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	b2db      	uxtb	r3, r3
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005044:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005098:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	031b      	lsls	r3, r3, #12
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80050be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	031b      	lsls	r3, r3, #12
 80050c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	f043 0307 	orr.w	r3, r3, #7
 8005108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	609a      	str	r2, [r3, #8]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	021a      	lsls	r2, r3, #8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	431a      	orrs	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4313      	orrs	r3, r2
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2201      	movs	r2, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1a      	ldr	r2, [r3, #32]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	43db      	mvns	r3, r3
 800517e:	401a      	ands	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
}
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051bc:	2302      	movs	r3, #2
 80051be:	e05a      	b.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a21      	ldr	r2, [pc, #132]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d022      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d01d      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d018      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1b      	ldr	r2, [pc, #108]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a18      	ldr	r2, [pc, #96]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d10c      	bne.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4313      	orrs	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40010400 	.word	0x40010400
 8005298:	40014000 	.word	0x40014000
 800529c:	40001800 	.word	0x40001800

080052a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <__libc_init_array>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	4e0d      	ldr	r6, [pc, #52]	; (8005300 <__libc_init_array+0x38>)
 80052cc:	4c0d      	ldr	r4, [pc, #52]	; (8005304 <__libc_init_array+0x3c>)
 80052ce:	1ba4      	subs	r4, r4, r6
 80052d0:	10a4      	asrs	r4, r4, #2
 80052d2:	2500      	movs	r5, #0
 80052d4:	42a5      	cmp	r5, r4
 80052d6:	d109      	bne.n	80052ec <__libc_init_array+0x24>
 80052d8:	4e0b      	ldr	r6, [pc, #44]	; (8005308 <__libc_init_array+0x40>)
 80052da:	4c0c      	ldr	r4, [pc, #48]	; (800530c <__libc_init_array+0x44>)
 80052dc:	f000 f820 	bl	8005320 <_init>
 80052e0:	1ba4      	subs	r4, r4, r6
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	2500      	movs	r5, #0
 80052e6:	42a5      	cmp	r5, r4
 80052e8:	d105      	bne.n	80052f6 <__libc_init_array+0x2e>
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052f0:	4798      	blx	r3
 80052f2:	3501      	adds	r5, #1
 80052f4:	e7ee      	b.n	80052d4 <__libc_init_array+0xc>
 80052f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052fa:	4798      	blx	r3
 80052fc:	3501      	adds	r5, #1
 80052fe:	e7f2      	b.n	80052e6 <__libc_init_array+0x1e>
 8005300:	08005350 	.word	0x08005350
 8005304:	08005350 	.word	0x08005350
 8005308:	08005350 	.word	0x08005350
 800530c:	08005354 	.word	0x08005354

08005310 <memset>:
 8005310:	4402      	add	r2, r0
 8005312:	4603      	mov	r3, r0
 8005314:	4293      	cmp	r3, r2
 8005316:	d100      	bne.n	800531a <memset+0xa>
 8005318:	4770      	bx	lr
 800531a:	f803 1b01 	strb.w	r1, [r3], #1
 800531e:	e7f9      	b.n	8005314 <memset+0x4>

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
